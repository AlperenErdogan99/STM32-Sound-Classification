
Final_Micro_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002df94  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031778  08031778  00050ad0  2**0
                  CONTENTS
  4 .ARM          00000008  08031778  08031778  00041778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031780  08031780  00050ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031780  08031780  00041780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031784  08031784  00041784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ad0  20000000  08031788  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000ad0  08032258  00050ad0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20000b7c  08032258  00050b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050ad0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c53  00000000  00000000  00050b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001419  00000000  00000000  00057753  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004d8  00000000  00000000  00058b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000420  00000000  00000000  00059048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000214ac  00000000  00000000  00059468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000057f1  00000000  00000000  0007a914  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb3c8  00000000  00000000  00080105  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b4cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012f0  00000000  00000000  0014b548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000ad0 	.word	0x20000ad0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037cc 	.word	0x080037cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000ad4 	.word	0x20000ad4
 80001c4:	080037cc 	.word	0x080037cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b972 	b.w	80008dc <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	4688      	mov	r8, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14b      	bne.n	80006b6 <__udivmoddi4+0xa6>
 800061e:	428a      	cmp	r2, r1
 8000620:	4615      	mov	r5, r2
 8000622:	d967      	bls.n	80006f4 <__udivmoddi4+0xe4>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b14a      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062a:	f1c2 0720 	rsb	r7, r2, #32
 800062e:	fa01 f302 	lsl.w	r3, r1, r2
 8000632:	fa20 f707 	lsr.w	r7, r0, r7
 8000636:	4095      	lsls	r5, r2
 8000638:	ea47 0803 	orr.w	r8, r7, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbb8 f7fe 	udiv	r7, r8, lr
 8000648:	fa1f fc85 	uxth.w	ip, r5
 800064c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000654:	fb07 f10c 	mul.w	r1, r7, ip
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18eb      	adds	r3, r5, r3
 800065e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000662:	f080 811b 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8118 	bls.w	800089c <__udivmoddi4+0x28c>
 800066c:	3f02      	subs	r7, #2
 800066e:	442b      	add	r3, r5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0fe 	udiv	r0, r3, lr
 8000678:	fb0e 3310 	mls	r3, lr, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fc0c 	mul.w	ip, r0, ip
 8000684:	45a4      	cmp	ip, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	192c      	adds	r4, r5, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8107 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000692:	45a4      	cmp	ip, r4
 8000694:	f240 8104 	bls.w	80008a0 <__udivmoddi4+0x290>
 8000698:	3802      	subs	r0, #2
 800069a:	442c      	add	r4, r5
 800069c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a0:	eba4 040c 	sub.w	r4, r4, ip
 80006a4:	2700      	movs	r7, #0
 80006a6:	b11e      	cbz	r6, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c6 4300 	strd	r4, r3, [r6]
 80006b0:	4639      	mov	r1, r7
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xbe>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80eb 	beq.w	8000896 <__udivmoddi4+0x286>
 80006c0:	2700      	movs	r7, #0
 80006c2:	e9c6 0100 	strd	r0, r1, [r6]
 80006c6:	4638      	mov	r0, r7
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f783 	clz	r7, r3
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d147      	bne.n	8000766 <__udivmoddi4+0x156>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd0>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80fa 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4698      	mov	r8, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa0>
 80006ee:	e9c6 4800 	strd	r4, r8, [r6]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa0>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xe8>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 808f 	bne.w	8000820 <__udivmoddi4+0x210>
 8000702:	1b49      	subs	r1, r1, r5
 8000704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000708:	fa1f f885 	uxth.w	r8, r5
 800070c:	2701      	movs	r7, #1
 800070e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fb0e 111c 	mls	r1, lr, ip, r1
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb08 f10c 	mul.w	r1, r8, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x124>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4299      	cmp	r1, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 8000732:	4684      	mov	ip, r0
 8000734:	1a59      	subs	r1, r3, r1
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x14c>
 800074c:	192c      	adds	r4, r5, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x14a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80b6 	bhi.w	80008c6 <__udivmoddi4+0x2b6>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e79f      	b.n	80006a6 <__udivmoddi4+0x96>
 8000766:	f1c7 0c20 	rsb	ip, r7, #32
 800076a:	40bb      	lsls	r3, r7
 800076c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000770:	ea4e 0e03 	orr.w	lr, lr, r3
 8000774:	fa01 f407 	lsl.w	r4, r1, r7
 8000778:	fa20 f50c 	lsr.w	r5, r0, ip
 800077c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000780:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000784:	4325      	orrs	r5, r4
 8000786:	fbb3 f9f8 	udiv	r9, r3, r8
 800078a:	0c2c      	lsrs	r4, r5, #16
 800078c:	fb08 3319 	mls	r3, r8, r9, r3
 8000790:	fa1f fa8e 	uxth.w	sl, lr
 8000794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000798:	fb09 f40a 	mul.w	r4, r9, sl
 800079c:	429c      	cmp	r4, r3
 800079e:	fa02 f207 	lsl.w	r2, r2, r7
 80007a2:	fa00 f107 	lsl.w	r1, r0, r7
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b0:	f080 8087 	bcs.w	80008c2 <__udivmoddi4+0x2b2>
 80007b4:	429c      	cmp	r4, r3
 80007b6:	f240 8084 	bls.w	80008c2 <__udivmoddi4+0x2b2>
 80007ba:	f1a9 0902 	sub.w	r9, r9, #2
 80007be:	4473      	add	r3, lr
 80007c0:	1b1b      	subs	r3, r3, r4
 80007c2:	b2ad      	uxth	r5, r5
 80007c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c8:	fb08 3310 	mls	r3, r8, r0, r3
 80007cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007d4:	45a2      	cmp	sl, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1e 0404 	adds.w	r4, lr, r4
 80007dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e0:	d26b      	bcs.n	80008ba <__udivmoddi4+0x2aa>
 80007e2:	45a2      	cmp	sl, r4
 80007e4:	d969      	bls.n	80008ba <__udivmoddi4+0x2aa>
 80007e6:	3802      	subs	r0, #2
 80007e8:	4474      	add	r4, lr
 80007ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ee:	fba0 8902 	umull	r8, r9, r0, r2
 80007f2:	eba4 040a 	sub.w	r4, r4, sl
 80007f6:	454c      	cmp	r4, r9
 80007f8:	46c2      	mov	sl, r8
 80007fa:	464b      	mov	r3, r9
 80007fc:	d354      	bcc.n	80008a8 <__udivmoddi4+0x298>
 80007fe:	d051      	beq.n	80008a4 <__udivmoddi4+0x294>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d069      	beq.n	80008d8 <__udivmoddi4+0x2c8>
 8000804:	ebb1 050a 	subs.w	r5, r1, sl
 8000808:	eb64 0403 	sbc.w	r4, r4, r3
 800080c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000810:	40fd      	lsrs	r5, r7
 8000812:	40fc      	lsrs	r4, r7
 8000814:	ea4c 0505 	orr.w	r5, ip, r5
 8000818:	e9c6 5400 	strd	r5, r4, [r6]
 800081c:	2700      	movs	r7, #0
 800081e:	e747      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000820:	f1c2 0320 	rsb	r3, r2, #32
 8000824:	fa20 f703 	lsr.w	r7, r0, r3
 8000828:	4095      	lsls	r5, r2
 800082a:	fa01 f002 	lsl.w	r0, r1, r2
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000836:	4338      	orrs	r0, r7
 8000838:	0c01      	lsrs	r1, r0, #16
 800083a:	fbb3 f7fe 	udiv	r7, r3, lr
 800083e:	fa1f f885 	uxth.w	r8, r5
 8000842:	fb0e 3317 	mls	r3, lr, r7, r3
 8000846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084a:	fb07 f308 	mul.w	r3, r7, r8
 800084e:	428b      	cmp	r3, r1
 8000850:	fa04 f402 	lsl.w	r4, r4, r2
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x256>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f107 3cff 	add.w	ip, r7, #4294967295
 800085c:	d22f      	bcs.n	80008be <__udivmoddi4+0x2ae>
 800085e:	428b      	cmp	r3, r1
 8000860:	d92d      	bls.n	80008be <__udivmoddi4+0x2ae>
 8000862:	3f02      	subs	r7, #2
 8000864:	4429      	add	r1, r5
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	b281      	uxth	r1, r0
 800086a:	fbb3 f0fe 	udiv	r0, r3, lr
 800086e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000876:	fb00 f308 	mul.w	r3, r0, r8
 800087a:	428b      	cmp	r3, r1
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x27e>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f100 3cff 	add.w	ip, r0, #4294967295
 8000884:	d217      	bcs.n	80008b6 <__udivmoddi4+0x2a6>
 8000886:	428b      	cmp	r3, r1
 8000888:	d915      	bls.n	80008b6 <__udivmoddi4+0x2a6>
 800088a:	3802      	subs	r0, #2
 800088c:	4429      	add	r1, r5
 800088e:	1ac9      	subs	r1, r1, r3
 8000890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000894:	e73b      	b.n	800070e <__udivmoddi4+0xfe>
 8000896:	4637      	mov	r7, r6
 8000898:	4630      	mov	r0, r6
 800089a:	e709      	b.n	80006b0 <__udivmoddi4+0xa0>
 800089c:	4607      	mov	r7, r0
 800089e:	e6e7      	b.n	8000670 <__udivmoddi4+0x60>
 80008a0:	4618      	mov	r0, r3
 80008a2:	e6fb      	b.n	800069c <__udivmoddi4+0x8c>
 80008a4:	4541      	cmp	r1, r8
 80008a6:	d2ab      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ac:	eb69 020e 	sbc.w	r2, r9, lr
 80008b0:	3801      	subs	r0, #1
 80008b2:	4613      	mov	r3, r2
 80008b4:	e7a4      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b6:	4660      	mov	r0, ip
 80008b8:	e7e9      	b.n	800088e <__udivmoddi4+0x27e>
 80008ba:	4618      	mov	r0, r3
 80008bc:	e795      	b.n	80007ea <__udivmoddi4+0x1da>
 80008be:	4667      	mov	r7, ip
 80008c0:	e7d1      	b.n	8000866 <__udivmoddi4+0x256>
 80008c2:	4681      	mov	r9, r0
 80008c4:	e77c      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	442c      	add	r4, r5
 80008ca:	e747      	b.n	800075c <__udivmoddi4+0x14c>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	442b      	add	r3, r5
 80008d2:	e72f      	b.n	8000734 <__udivmoddi4+0x124>
 80008d4:	4638      	mov	r0, r7
 80008d6:	e708      	b.n	80006ea <__udivmoddi4+0xda>
 80008d8:	4637      	mov	r7, r6
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0xa0>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	f6ad 1d38 	subw	sp, sp, #2360	; 0x938
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	char buf[50];
	int buf_len = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	// Giriş ve çıkış tensorları tanımlanmaktadır.
	AI_ALIGNED(4) ai_i8 in_data[AI_MY_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_MY_MODEL_OUT_1_SIZE_BYTES];

	// Modelin pointeri oluşturulmaktadır.
	ai_handle my_model = AI_HANDLE_NULL;
 80008ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]

	//initialize wrapper structs that hold pointers to data and info about the
	// data(tensor height, width, channels)
	ai_buffer ai_input[AI_MY_MODEL_IN_NUM] = AI_MY_MODEL_IN;
 80008f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008fa:	4abe      	ldr	r2, [pc, #760]	; (8000bf4 <main+0x314>)
 80008fc:	461c      	mov	r4, r3
 80008fe:	4615      	mov	r5, r2
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000908:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_MY_MODEL_OUT_NUM] = AI_MY_MODEL_OUT;
 800090c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000910:	4ab9      	ldr	r2, [pc, #740]	; (8000bf8 <main+0x318>)
 8000912:	461c      	mov	r4, r3
 8000914:	4615      	mov	r5, r2
 8000916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800091e:	e884 0003 	stmia.w	r4, {r0, r1}

	//set working memory and get weights and biases from model
	ai_network_params ai_params = {
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4ab5      	ldr	r2, [pc, #724]	; (8000bfc <main+0x31c>)
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2201      	movs	r2, #1
 800092c:	809a      	strh	r2, [r3, #4]
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2201      	movs	r2, #1
 8000932:	80da      	strh	r2, [r3, #6]
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2201      	movs	r2, #1
 8000938:	811a      	strh	r2, [r3, #8]
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4ab0      	ldr	r2, [pc, #704]	; (8000c00 <main+0x320>)
 800093e:	60da      	str	r2, [r3, #12]

	AI_MY_MODEL_DATA_WEIGHTS(ai_my_model_data_weights_get()),
 8000940:	f001 fc24 	bl	800218c <ai_my_model_data_weights_get>
 8000944:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4aac      	ldr	r2, [pc, #688]	; (8000c04 <main+0x324>)
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2201      	movs	r2, #1
 800095a:	839a      	strh	r2, [r3, #28]
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2201      	movs	r2, #1
 8000960:	83da      	strh	r2, [r3, #30]
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2201      	movs	r2, #1
 8000966:	841a      	strh	r2, [r3, #32]
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_MY_MODEL_DATA_ACTIVATIONS(activations) };

	//set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 800097e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000982:	2201      	movs	r2, #1
 8000984:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800098e:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8000990:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000994:	2201      	movs	r2, #1
 8000996:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80009a0:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fb65 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f9db 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 fa57 	bl	8000e5c <MX_GPIO_Init>
  MX_CRC_Init();
 80009ae:	f000 fa41 	bl	8000e34 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	//greetings!!
	buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test \r\n");
 80009b2:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 80009b6:	4a94      	ldr	r2, [pc, #592]	; (8000c08 <main+0x328>)
 80009b8:	461c      	mov	r4, r3
 80009ba:	4615      	mov	r5, r2
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009c8:	231b      	movs	r3, #27
 80009ca:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	//buf değişkeninde verimiz saklanıyor

	//Modelimiz oluşturuluyor.
	ai_err = ai_my_model_create(&my_model, AI_MY_MODEL_DATA_CONFIG);
 80009ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fb73 	bl	80020c0 <ai_my_model_create>
 80009da:	4603      	mov	r3, r0
 80009dc:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
	if (ai_err.type != AI_ERROR_NONE) {
 80009e0:	f897 38e8 	ldrb.w	r3, [r7, #2280]	; 0x8e8
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d011      	beq.n	8000a0c <main+0x12c>
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80009e8:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 80009ec:	4a87      	ldr	r2, [pc, #540]	; (8000c0c <main+0x32c>)
 80009ee:	461c      	mov	r4, r3
 80009f0:	4615      	mov	r5, r2
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009fe:	6020      	str	r0, [r4, #0]
 8000a00:	3404      	adds	r4, #4
 8000a02:	8021      	strh	r1, [r4, #0]
 8000a04:	2325      	movs	r3, #37	; 0x25
 8000a06:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
		//buf değişkeninde verimiz saklanıyor
		while (1)
 8000a0a:	e7fe      	b.n	8000a0a <main+0x12a>
			;
	}

	//Modelin ön ayarlamaları yapılıyor.
	if (!ai_my_model_init(my_model, &ai_params)) {
 8000a0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1d3a      	adds	r2, r7, #4
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fb68 	bl	80020ec <ai_my_model_init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00e      	beq.n	8000a46 <main+0x166>
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000a28:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8000a2c:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <main+0x330>)
 8000a2e:	461c      	mov	r4, r3
 8000a30:	4615      	mov	r5, r2
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	7023      	strb	r3, [r4, #0]
 8000a3e:	2320      	movs	r3, #32
 8000a40:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
		//buf değişkeninde verimiz saklanıyor
		while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x164>
	while (1) {

		/*
		 * Buffer temizleniyor
		 */
		for (uint32_t i = 0; i < 40; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8000a4c:	e00e      	b.n	8000a6c <main+0x18c>
			y_val_array[i] = 0;
 8000a4e:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8000a58:	4413      	add	r3, r2
 8000a5a:	3bf0      	subs	r3, #240	; 0xf0
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < 40; i++) {
 8000a62:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8000a66:	3301      	adds	r3, #1
 8000a68:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8000a6c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8000a70:	2b27      	cmp	r3, #39	; 0x27
 8000a72:	d9ec      	bls.n	8000a4e <main+0x16e>
		/*
		 * note: modele göndereceğimiz verilerimizi
		 * input bufferına alıyoruz.
		 */

		for (uint32_t i = 0; i < AI_MY_MODEL_IN_1_SIZE; i++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
 8000a7a:	e011      	b.n	8000aa0 <main+0x1c0>
			((ai_float*) in_data)[i] = halil_ses_mfcc_1[i];
 8000a7c:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000a86:	4413      	add	r3, r2
 8000a88:	4962      	ldr	r1, [pc, #392]	; (8000c14 <main+0x334>)
 8000a8a:	f8d7 2930 	ldr.w	r2, [r7, #2352]	; 0x930
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	440a      	add	r2, r1
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < AI_MY_MODEL_IN_1_SIZE; i++) {
 8000a96:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
 8000aa0:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8000aa4:	2be9      	cmp	r3, #233	; 0xe9
 8000aa6:	d9e9      	bls.n	8000a7c <main+0x19c>
		/*
		 * note: yüklediğimiz test verilerini modele gönderiyoruz.
		 * modeli bu veriler ile çalıştırıyoruz. Sonuçlarını kaydediyoruz.
		 * predict işlemini yapıyoruz yani aslında.
		 */
		nbatch = ai_my_model_run(my_model, &ai_input[0], &ai_output[0]);
 8000aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ab2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fb57 	bl	800216a <ai_my_model_run>
 8000abc:	f8c7 0920 	str.w	r0, [r7, #2336]	; 0x920
		if (nbatch != 1) {
 8000ac0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d00d      	beq.n	8000ae4 <main+0x204>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000ac8:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8000acc:	4a52      	ldr	r2, [pc, #328]	; (8000c18 <main+0x338>)
 8000ace:	461c      	mov	r4, r3
 8000ad0:	4615      	mov	r5, r2
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	7023      	strb	r3, [r4, #0]
 8000ade:	2320      	movs	r3, #32
 8000ae0:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
		 * bunun sebebi softmax için 10 nöronlu bir
		 * çıkış layeri kullanmamızdır. 0 ile 9 arasındaki
		 * hangi index 1'e en yakın ise sınıflandırmanın
		 * sonucu ilgili indextir.
		 */
		for (uint32_t i = 0; i < 10; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8000aea:	e013      	b.n	8000b14 <main+0x234>
			y_val_array[i] = ((float*) out_data)[i];
 8000aec:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000af6:	4413      	add	r3, r2
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8000b04:	440b      	add	r3, r1
 8000b06:	3bf0      	subs	r3, #240	; 0xf0
 8000b08:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < 10; i++) {
 8000b0a:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8000b14:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8000b18:	2b09      	cmp	r3, #9
 8000b1a:	d9e7      	bls.n	8000aec <main+0x20c>

		}

		for (uint32_t i = 0 ; i<3 ; i++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 3928 	str.w	r3, [r7, #2344]	; 0x928
 8000b22:	e01a      	b.n	8000b5a <main+0x27a>

			karar_dizisi[i] = 1 - y_val_array[i];
 8000b24:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8000b2e:	4413      	add	r3, r2
 8000b30:	3bf0      	subs	r3, #240	; 0xf0
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3e:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8000b48:	4413      	add	r3, r2
 8000b4a:	3bfc      	subs	r3, #252	; 0xfc
 8000b4c:	edc3 7a00 	vstr	s15, [r3]
		for (uint32_t i = 0 ; i<3 ; i++){
 8000b50:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8000b54:	3301      	adds	r3, #1
 8000b56:	f8c7 3928 	str.w	r3, [r7, #2344]	; 0x928
 8000b5a:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d9e0      	bls.n	8000b24 <main+0x244>


		}

		memset(sonuclar, '0', 30);
 8000b62:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000b66:	221e      	movs	r2, #30
 8000b68:	2130      	movs	r1, #48	; 0x30
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fccb 	bl	8003506 <memset>
		 * Modelin çıkışından alınan veriye göre sınıflandırma sonucu yorumlanır.
		 * Ses alperen sınıfına ait ise D13 Ledi yanar.
		 * Ses annem sınıfına ait ise D12 Ledi yanar.
		 * Ses halil sınıfına ait ise D15 Ledi yanar.
		 */
		if ((karar_dizisi[0] < karar_dizisi[1]) & ( karar_dizisi[0] < karar_dizisi[2])){
 8000b70:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000b74:	ed93 7a00 	vldr	s14, [r3]
 8000b78:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8000b7c:	edd3 7a00 	vldr	s15, [r3]
 8000b80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b88:	bf4c      	ite	mi
 8000b8a:	2301      	movmi	r3, #1
 8000b8c:	2300      	movpl	r3, #0
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000b94:	ed93 7a00 	vldr	s14, [r3]
 8000b98:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8000b9c:	edd3 7a00 	vldr	s15, [r3]
 8000ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba8:	bf4c      	ite	mi
 8000baa:	2301      	movmi	r3, #1
 8000bac:	2300      	movpl	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d035      	beq.n	8000c24 <main+0x344>
			strcpy(sonuclar, "Alperen Bey Hosgeldiniz !!! ");
 8000bb8:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <main+0x33c>)
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	4615      	mov	r5, r2
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bca:	c407      	stmia	r4!, {r0, r1, r2}
 8000bcc:	7023      	strb	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <main+0x340>)
 8000bd6:	f000 fd59 	bl	800168c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <main+0x340>)
 8000be2:	f000 fd53 	bl	800168c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <main+0x340>)
 8000bee:	f000 fd4d 	bl	800168c <HAL_GPIO_WritePin>
 8000bf2:	e728      	b.n	8000a46 <main+0x166>
 8000bf4:	080038d8 	.word	0x080038d8
 8000bf8:	080038f0 	.word	0x080038f0
 8000bfc:	40040440 	.word	0x40040440
 8000c00:	0002de0c 	.word	0x0002de0c
 8000c04:	00040440 	.word	0x00040440
 8000c08:	080037e4 	.word	0x080037e4
 8000c0c:	08003800 	.word	0x08003800
 8000c10:	08003828 	.word	0x08003828
 8000c14:	20000000 	.word	0x20000000
 8000c18:	0800384c 	.word	0x0800384c
 8000c1c:	08003870 	.word	0x08003870
 8000c20:	40020c00 	.word	0x40020c00

		}else if((karar_dizisi[1] < karar_dizisi[0]) & ( karar_dizisi[1] < karar_dizisi[2])){
 8000c24:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8000c28:	ed93 7a00 	vldr	s14, [r3]
 8000c2c:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000c30:	edd3 7a00 	vldr	s15, [r3]
 8000c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3c:	bf4c      	ite	mi
 8000c3e:	2301      	movmi	r3, #1
 8000c40:	2300      	movpl	r3, #0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8000c48:	ed93 7a00 	vldr	s14, [r3]
 8000c4c:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	bf4c      	ite	mi
 8000c5e:	2301      	movmi	r3, #1
 8000c60:	2300      	movpl	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d01b      	beq.n	8000ca4 <main+0x3c4>
			strcpy(sonuclar, "Anne Hosgeldin !!! ");
 8000c6c:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000c70:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <main+0x470>)
 8000c72:	461c      	mov	r4, r3
 8000c74:	4615      	mov	r5, r2
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	682b      	ldr	r3, [r5, #0]
 8000c7c:	6023      	str	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	4833      	ldr	r0, [pc, #204]	; (8000d54 <main+0x474>)
 8000c86:	f000 fd01 	bl	800168c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	4830      	ldr	r0, [pc, #192]	; (8000d54 <main+0x474>)
 8000c92:	f000 fcfb 	bl	800168c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9c:	482d      	ldr	r0, [pc, #180]	; (8000d54 <main+0x474>)
 8000c9e:	f000 fcf5 	bl	800168c <HAL_GPIO_WritePin>
 8000ca2:	e6d0      	b.n	8000a46 <main+0x166>
		}else if ((karar_dizisi[2] < karar_dizisi[0]) & ( karar_dizisi[2] < karar_dizisi[1])){
 8000ca4:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8000ca8:	ed93 7a00 	vldr	s14, [r3]
 8000cac:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	bf4c      	ite	mi
 8000cbe:	2301      	movmi	r3, #1
 8000cc0:	2300      	movpl	r3, #0
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8000cc8:	ed93 7a00 	vldr	s14, [r3]
 8000ccc:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8000cd0:	edd3 7a00 	vldr	s15, [r3]
 8000cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	bf4c      	ite	mi
 8000cde:	2301      	movmi	r3, #1
 8000ce0:	2300      	movpl	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d020      	beq.n	8000d2e <main+0x44e>
			strcpy(sonuclar, "Halil Bey Hosgeldiniz !!! ");
 8000cec:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <main+0x478>)
 8000cf2:	461c      	mov	r4, r3
 8000cf4:	4615      	mov	r5, r2
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfe:	c403      	stmia	r4!, {r0, r1}
 8000d00:	8022      	strh	r2, [r4, #0]
 8000d02:	3402      	adds	r4, #2
 8000d04:	0c13      	lsrs	r3, r2, #16
 8000d06:	7023      	strb	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0e:	4811      	ldr	r0, [pc, #68]	; (8000d54 <main+0x474>)
 8000d10:	f000 fcbc 	bl	800168c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <main+0x474>)
 8000d1c:	f000 fcb6 	bl	800168c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <main+0x474>)
 8000d28:	f000 fcb0 	bl	800168c <HAL_GPIO_WritePin>
 8000d2c:	e68b      	b.n	8000a46 <main+0x166>
		}else {
			strcpy(sonuclar, "Sizi Taniyamadım !!! ");
 8000d2e:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <main+0x47c>)
 8000d34:	461c      	mov	r4, r3
 8000d36:	4615      	mov	r5, r2
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d40:	6020      	str	r0, [r4, #0]
 8000d42:	3404      	adds	r4, #4
 8000d44:	8021      	strh	r1, [r4, #0]
 8000d46:	3402      	adds	r4, #2
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < 40; i++) {
 8000d4c:	e67b      	b.n	8000a46 <main+0x166>
 8000d4e:	bf00      	nop
 8000d50:	08003890 	.word	0x08003890
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	080038a4 	.word	0x080038a4
 8000d5c:	080038c0 	.word	0x080038c0

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fbc9 	bl	8003506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fc6a 	bl	80016c0 <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f000 f885 	bl	8000f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2105      	movs	r1, #5
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fec3 	bl	8001ba0 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f000 f86e 	bl	8000f00 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <MX_CRC_Init+0x24>)
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e40:	f000 fa6d 	bl	800131e <HAL_CRC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e4a:	f000 f859 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000b70 	.word	0x20000b70
 8000e58:	40023000 	.word	0x40023000

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_GPIO_Init+0x9c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AYSE_LED_Pin|ALPEREN_LED_Pin|HALIL_LED_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_GPIO_Init+0xa0>)
 8000ece:	f000 fbdd 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AYSE_LED_Pin ALPEREN_LED_Pin HALIL_LED_Pin */
  GPIO_InitStruct.Pin = AYSE_LED_Pin|ALPEREN_LED_Pin|HALIL_LED_Pin;
 8000ed2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_GPIO_Init+0xa0>)
 8000eec:	f000 fa34 	bl	8001358 <HAL_GPIO_Init>

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x6>

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f46:	2007      	movs	r0, #7
 8000f48:	f000 f9b6 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_CRC_MspInit+0x3c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023000 	.word	0x40023000
 8000f98:	40023800 	.word	0x40023800

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f894 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SystemInit+0x28>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <SystemInit+0x28>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SystemInit+0x28>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001022:	e003      	b.n	800102c <LoopCopyDataInit>

08001024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102a:	3104      	adds	r1, #4

0800102c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001034:	d3f6      	bcc.n	8001024 <CopyDataInit>
  ldr  r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001038:	e002      	b.n	8001040 <LoopFillZerobss>

0800103a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800103c:	f842 3b04 	str.w	r3, [r2], #4

08001040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001044:	d3f9      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd3 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f002 fa2d 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fc47 	bl	80008e0 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001058:	08031788 	.word	0x08031788
  ldr  r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001060:	20000ad0 	.word	0x20000ad0
  ldr  r2, =_sbss
 8001064:	20000ad0 	.word	0x20000ad0
  ldr  r3, = _ebss
 8001068:	20000b7c 	.word	0x20000b7c

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f90d 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff ff30 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f917 	bl	8001306 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f8ed 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200003a8 	.word	0x200003a8
 800110c:	200003b0 	.word	0x200003b0
 8001110:	200003ac 	.word	0x200003ac

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200003b0 	.word	0x200003b0
 8001138:	20000b78 	.word	0x20000b78

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000b78 	.word	0x20000b78

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff47 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff5c 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffb0 	bl	8001274 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e00e      	b.n	800134e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d105      	bne.n	8001346 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fe09 	bl	8000f58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e16b      	b.n	800164c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 815a 	bne.w	8001646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d00b      	beq.n	80013b2 <HAL_GPIO_Init+0x5a>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0xfc>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80b4 	beq.w	8001646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_GPIO_Init+0x308>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x308>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_GPIO_Init+0x308>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fa:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <HAL_GPIO_Init+0x30c>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a51      	ldr	r2, [pc, #324]	; (8001668 <HAL_GPIO_Init+0x310>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d02b      	beq.n	800157e <HAL_GPIO_Init+0x226>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x314>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d025      	beq.n	800157a <HAL_GPIO_Init+0x222>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <HAL_GPIO_Init+0x318>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <HAL_GPIO_Init+0x21e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x31c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x21a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x320>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x216>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_GPIO_Init+0x324>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x212>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_GPIO_Init+0x328>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x20e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_GPIO_Init+0x32c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x20a>
 800155e:	2307      	movs	r3, #7
 8001560:	e00e      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001562:	2308      	movs	r3, #8
 8001564:	e00c      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001566:	2306      	movs	r3, #6
 8001568:	e00a      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800156a:	2305      	movs	r3, #5
 800156c:	e008      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800156e:	2304      	movs	r3, #4
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001572:	2303      	movs	r3, #3
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800157e:	2300      	movs	r3, #0
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4093      	lsls	r3, r2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001590:	4934      	ldr	r1, [pc, #208]	; (8001664 <HAL_GPIO_Init+0x30c>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <HAL_GPIO_Init+0x330>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <HAL_GPIO_Init+0x330>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_GPIO_Init+0x330>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ec:	4a26      	ldr	r2, [pc, #152]	; (8001688 <HAL_GPIO_Init+0x330>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_GPIO_Init+0x330>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <HAL_GPIO_Init+0x330>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_GPIO_Init+0x330>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_GPIO_Init+0x330>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3301      	adds	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	f67f ae90 	bls.w	8001374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001654:	bf00      	nop
 8001656:	3724      	adds	r7, #36	; 0x24
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40023800 	.word	0x40023800
 8001664:	40013800 	.word	0x40013800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40021400 	.word	0x40021400
 8001680:	40021800 	.word	0x40021800
 8001684:	40021c00 	.word	0x40021c00
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016a8:	e003      	b.n	80016b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	041a      	lsls	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e25b      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d075      	beq.n	80017ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016de:	4ba3      	ldr	r3, [pc, #652]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d00c      	beq.n	8001704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ea:	4ba0      	ldr	r3, [pc, #640]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d112      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4b9d      	ldr	r3, [pc, #628]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001702:	d10b      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b99      	ldr	r3, [pc, #612]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d05b      	beq.n	80017c8 <HAL_RCC_OscConfig+0x108>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d157      	bne.n	80017c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e236      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x74>
 8001726:	4b91      	ldr	r3, [pc, #580]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a90      	ldr	r2, [pc, #576]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b8b      	ldr	r3, [pc, #556]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a8a      	ldr	r2, [pc, #552]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a87      	ldr	r2, [pc, #540]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001758:	4b84      	ldr	r3, [pc, #528]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a83      	ldr	r2, [pc, #524]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a80      	ldr	r2, [pc, #512]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fce0 	bl	800113c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fcdc 	bl	800113c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1fb      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0xc0>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fccc 	bl	800113c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fcc8 	bl	800113c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1e7      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	4b6c      	ldr	r3, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0xe8>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d063      	beq.n	800189e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b62      	ldr	r3, [pc, #392]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d11c      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	4b5c      	ldr	r3, [pc, #368]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1bb      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4952      	ldr	r1, [pc, #328]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	e03a      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_RCC_OscConfig+0x2b0>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fc81 	bl	800113c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc7d 	bl	800113c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e19c      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4940      	ldr	r1, [pc, #256]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_OscConfig+0x2b0>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fc60 	bl	800113c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fc5c 	bl	800113c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e17b      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d030      	beq.n	800190c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d016      	beq.n	80018e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_OscConfig+0x2b4>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fc40 	bl	800113c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc3c 	bl	800113c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e15b      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x200>
 80018de:	e015      	b.n	800190c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_OscConfig+0x2b4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fc29 	bl	800113c <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc25 	bl	800113c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e144      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a0 	beq.w	8001a5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x2b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d121      	bne.n	800199a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x2b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_RCC_OscConfig+0x2b8>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001962:	f7ff fbeb 	bl	800113c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	e011      	b.n	800198e <HAL_RCC_OscConfig+0x2ce>
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	42470000 	.word	0x42470000
 8001974:	42470e80 	.word	0x42470e80
 8001978:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197c:	f7ff fbde 	bl	800113c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0fd      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d106      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
 80019a2:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a7c      	ldr	r2, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	e01c      	b.n	80019ea <HAL_RCC_OscConfig+0x32a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d10c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x312>
 80019b8:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a76      	ldr	r2, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e00b      	b.n	80019ea <HAL_RCC_OscConfig+0x32a>
 80019d2:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a70      	ldr	r2, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a6d      	ldr	r2, [pc, #436]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fba3 	bl	800113c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fb9f 	bl	800113c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0bc      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ee      	beq.n	80019fa <HAL_RCC_OscConfig+0x33a>
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb8d 	bl	800113c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fb89 	bl	800113c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0a6      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8092 	beq.w	8001b88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d05c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d141      	bne.n	8001afc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fb5d 	bl	800113c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff fb59 	bl	800113c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e078      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb32 	bl	800113c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fb2e 	bl	800113c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04d      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x41c>
 8001afa:	e045      	b.n	8001b88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb1b 	bl	800113c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fb17 	bl	800113c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e036      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x44a>
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e029      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d115      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d10d      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470060 	.word	0x42470060

08001ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cc      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d90c      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0b8      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	494d      	ldr	r1, [pc, #308]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d044      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d119      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e067      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4934      	ldr	r1, [pc, #208]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff fa54 	bl	800113c <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff fa50 	bl	800113c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e04f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d20c      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e032      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4916      	ldr	r1, [pc, #88]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	490e      	ldr	r1, [pc, #56]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d26:	f000 f821 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d2a:	4601      	mov	r1, r0
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f9b4 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	0800390c 	.word	0x0800390c
 8001d64:	200003a8 	.word	0x200003a8
 8001d68:	200003ac 	.word	0x200003ac

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d007      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x32>
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d008      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x38>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 80b4 	bne.w	8001f00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d9a:	60bb      	str	r3, [r7, #8]
       break;
 8001d9c:	e0b3      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001da0:	60bb      	str	r3, [r7, #8]
      break;
 8001da2:	e0b0      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da4:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d04a      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	f04f 0400 	mov.w	r4, #0
 8001dc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	ea03 0501 	and.w	r5, r3, r1
 8001dd0:	ea04 0602 	and.w	r6, r4, r2
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	4632      	mov	r2, r6
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	f04f 0400 	mov.w	r4, #0
 8001de0:	0154      	lsls	r4, r2, #5
 8001de2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001de6:	014b      	lsls	r3, r1, #5
 8001de8:	4619      	mov	r1, r3
 8001dea:	4622      	mov	r2, r4
 8001dec:	1b49      	subs	r1, r1, r5
 8001dee:	eb62 0206 	sbc.w	r2, r2, r6
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	f04f 0400 	mov.w	r4, #0
 8001dfa:	0194      	lsls	r4, r2, #6
 8001dfc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e00:	018b      	lsls	r3, r1, #6
 8001e02:	1a5b      	subs	r3, r3, r1
 8001e04:	eb64 0402 	sbc.w	r4, r4, r2
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	00e2      	lsls	r2, r4, #3
 8001e12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e16:	00d9      	lsls	r1, r3, #3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	195b      	adds	r3, r3, r5
 8001e1e:	eb44 0406 	adc.w	r4, r4, r6
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	0262      	lsls	r2, r4, #9
 8001e2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e30:	0259      	lsls	r1, r3, #9
 8001e32:	460b      	mov	r3, r1
 8001e34:	4614      	mov	r4, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	4621      	mov	r1, r4
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f04f 0400 	mov.w	r4, #0
 8001e40:	461a      	mov	r2, r3
 8001e42:	4623      	mov	r3, r4
 8001e44:	f7fe fbcc 	bl	80005e0 <__aeabi_uldivmod>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e049      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	f04f 0400 	mov.w	r4, #0
 8001e5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	ea03 0501 	and.w	r5, r3, r1
 8001e66:	ea04 0602 	and.w	r6, r4, r2
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	4632      	mov	r2, r6
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	0154      	lsls	r4, r2, #5
 8001e78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e7c:	014b      	lsls	r3, r1, #5
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4622      	mov	r2, r4
 8001e82:	1b49      	subs	r1, r1, r5
 8001e84:	eb62 0206 	sbc.w	r2, r2, r6
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	f04f 0400 	mov.w	r4, #0
 8001e90:	0194      	lsls	r4, r2, #6
 8001e92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e96:	018b      	lsls	r3, r1, #6
 8001e98:	1a5b      	subs	r3, r3, r1
 8001e9a:	eb64 0402 	sbc.w	r4, r4, r2
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	00e2      	lsls	r2, r4, #3
 8001ea8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eac:	00d9      	lsls	r1, r3, #3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	195b      	adds	r3, r3, r5
 8001eb4:	eb44 0406 	adc.w	r4, r4, r6
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	02a2      	lsls	r2, r4, #10
 8001ec2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ec6:	0299      	lsls	r1, r3, #10
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	4621      	mov	r1, r4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f04f 0400 	mov.w	r4, #0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4623      	mov	r3, r4
 8001eda:	f7fe fb81 	bl	80005e0 <__aeabi_uldivmod>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	60bb      	str	r3, [r7, #8]
      break;
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f02:	60bb      	str	r3, [r7, #8]
      break;
 8001f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f06:	68bb      	ldr	r3, [r7, #8]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <my_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool my_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_MY_MODEL_ACTIVATIONS_ALIGNMENT));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	f023 0303 	bic.w	r3, r3, #3
 8001f30:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    flatten_4_input_output_array.data = AI_PTR(NULL);
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <my_model_configure_activations+0x88>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
    flatten_4_input_output_array.data_start = AI_PTR(NULL);
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <my_model_configure_activations+0x88>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <my_model_configure_activations+0x8c>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <my_model_configure_activations+0x8c>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 8001f4a:	4a18      	ldr	r2, [pc, #96]	; (8001fac <my_model_configure_activations+0x90>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8001f50:	4a16      	ldr	r2, [pc, #88]	; (8001fac <my_model_configure_activations+0x90>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <my_model_configure_activations+0x94>)
 8001f5e:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <my_model_configure_activations+0x94>)
 8001f68:	60d3      	str	r3, [r2, #12]
    nl_2_output_array.data = AI_PTR(activations + 0);
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <my_model_configure_activations+0x98>)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6093      	str	r3, [r2, #8]
    nl_2_output_array.data_start = AI_PTR(activations + 0);
 8001f70:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <my_model_configure_activations+0x98>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 512);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <my_model_configure_activations+0x9c>)
 8001f7e:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 512);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <my_model_configure_activations+0x9c>)
 8001f88:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(NULL);
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <my_model_configure_activations+0xa0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
    nl_4_output_array.data_start = AI_PTR(NULL);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <my_model_configure_activations+0xa0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000474 	.word	0x20000474
 8001fa8:	20000484 	.word	0x20000484
 8001fac:	20000494 	.word	0x20000494
 8001fb0:	200004a4 	.word	0x200004a4
 8001fb4:	200004b4 	.word	0x200004b4
 8001fb8:	200004c4 	.word	0x200004c4
 8001fbc:	200004d4 	.word	0x200004d4

08001fc0 <my_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool my_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <my_model_configure_weights+0xe8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <my_model_configure_weights+0xe8>)
 8001fda:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 187904);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f503 3337 	add.w	r3, r3, #187392	; 0x2dc00
 8001fe2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fe6:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <my_model_configure_weights+0xe8>)
 8001fe8:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 187904);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f503 3337 	add.w	r3, r3, #187392	; 0x2dc00
 8001ff0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <my_model_configure_weights+0xe8>)
 8001ff6:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <my_model_configure_weights+0xec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <my_model_configure_weights+0xec>)
 8002002:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 186368);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 800200a:	4a28      	ldr	r2, [pc, #160]	; (80020ac <my_model_configure_weights+0xec>)
 800200c:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 186368);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <my_model_configure_weights+0xec>)
 8002016:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <my_model_configure_weights+0xf0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <my_model_configure_weights+0xf0>)
 8002022:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 185856);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f503 3335 	add.w	r3, r3, #185344	; 0x2d400
 800202a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <my_model_configure_weights+0xf0>)
 8002030:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 185856);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f503 3335 	add.w	r3, r3, #185344	; 0x2d400
 8002038:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <my_model_configure_weights+0xf0>)
 800203e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <my_model_configure_weights+0xf4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002048:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <my_model_configure_weights+0xf4>)
 800204a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 120320);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f503 33eb 	add.w	r3, r3, #120320	; 0x1d600
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <my_model_configure_weights+0xf4>)
 8002054:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 120320);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f503 33eb 	add.w	r3, r3, #120320	; 0x1d600
 800205c:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <my_model_configure_weights+0xf4>)
 800205e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <my_model_configure_weights+0xf8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <my_model_configure_weights+0xf8>)
 800206a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 119808);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8002072:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <my_model_configure_weights+0xf8>)
 8002074:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 119808);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <my_model_configure_weights+0xf8>)
 800207e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <my_model_configure_weights+0xfc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <my_model_configure_weights+0xfc>)
 800208a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <my_model_configure_weights+0xfc>)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <my_model_configure_weights+0xfc>)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000414 	.word	0x20000414
 80020ac:	20000424 	.word	0x20000424
 80020b0:	20000434 	.word	0x20000434
 80020b4:	20000444 	.word	0x20000444
 80020b8:	20000454 	.word	0x20000454
 80020bc:	20000464 	.word	0x20000464

080020c0 <ai_my_model_create>:
}

AI_API_ENTRY
ai_error ai_my_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80020ca:	2300      	movs	r3, #0
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2303      	movs	r3, #3
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <ai_my_model_create+0x28>)
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f881 	bl	80021e0 <ai_platform_network_create>
 80020de:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200003b4 	.word	0x200003b4

080020ec <ai_my_model_init>:
}

AI_API_ENTRY
ai_bool ai_my_model_init(
  ai_handle network, const ai_network_params* params)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f8c9 	bl	8002290 <ai_platform_network_init>
 80020fe:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <ai_my_model_init+0x1e>
 8002106:	2300      	movs	r3, #0
 8002108:	e02b      	b.n	8002162 <ai_my_model_init+0x76>

  ai_bool ok = true;
 800210a:	2301      	movs	r3, #1
 800210c:	72fb      	strb	r3, [r7, #11]
  ok &= my_model_configure_weights(net_ctx, &params->params);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff ff54 	bl	8001fc0 <my_model_configure_weights>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	72fb      	strb	r3, [r7, #11]
  ok &= my_model_configure_activations(net_ctx, &params->activations);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3318      	adds	r3, #24
 800212e:	4619      	mov	r1, r3
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fef3 	bl	8001f1c <my_model_configure_activations>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f91f 	bl	800238c <ai_platform_network_post_init>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	72fb      	strb	r3, [r7, #11]

  return ok;
 8002160:	7afb      	ldrb	r3, [r7, #11]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <ai_my_model_run>:


AI_API_ENTRY
ai_i32 ai_my_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f94e 	bl	800241c <ai_platform_network_process>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <ai_my_model_data_weights_get>:
#include "my_model_data.h"

ai_handle ai_my_model_data_weights_get(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
    0xf9, 0x49, 0x3e, 0x9a, 0x8d, 0x61, 0x3e, 0x79, 0xc3,
    0x02, 0xbc, 0x45, 0xe7, 0xf9, 0xbd, 0x85, 0x59, 0x08,
    0x3b, 0x60, 0x8e, 0xef, 0xba, 0xec, 0x02, 0x01, 0x3b
  };

  return AI_HANDLE_PTR(s_my_model_weights);
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <ai_my_model_data_weights_get+0x10>)

}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	0800394c 	.word	0x0800394c

080021a0 <_platform_network_state_setup.isra.1>:
 80021a0:	b430      	push	{r4, r5}
 80021a2:	68dd      	ldr	r5, [r3, #12]
 80021a4:	695c      	ldr	r4, [r3, #20]
 80021a6:	68ed      	ldr	r5, [r5, #12]
 80021a8:	68e4      	ldr	r4, [r4, #12]
 80021aa:	fb04 f405 	mul.w	r4, r4, r5
 80021ae:	6084      	str	r4, [r0, #8]
 80021b0:	8809      	ldrh	r1, [r1, #0]
 80021b2:	fb04 f401 	mul.w	r4, r4, r1
 80021b6:	60c4      	str	r4, [r0, #12]
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	6041      	str	r1, [r0, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4414      	add	r4, r2
 80021c0:	6004      	str	r4, [r0, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	6814      	ldr	r4, [r2, #0]
 80021c6:	00a4      	lsls	r4, r4, #2
 80021c8:	d407      	bmi.n	80021da <_platform_network_state_setup.isra.1+0x3a>
 80021ca:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80021ce:	1b64      	subs	r4, r4, r5
 80021d0:	4421      	add	r1, r4
 80021d2:	6091      	str	r1, [r2, #8]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	6842      	ldr	r2, [r0, #4]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	bc30      	pop	{r4, r5}
 80021dc:	4770      	bx	lr
	...

080021e0 <ai_platform_network_create>:
 80021e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e4:	4e23      	ldr	r6, [pc, #140]	; (8002274 <ai_platform_network_create+0x94>)
 80021e6:	4924      	ldr	r1, [pc, #144]	; (8002278 <ai_platform_network_create+0x98>)
 80021e8:	6835      	ldr	r5, [r6, #0]
 80021ea:	b082      	sub	sp, #8
 80021ec:	f025 0501 	bic.w	r5, r5, #1
 80021f0:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80021f4:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80021f8:	6035      	str	r5, [r6, #0]
 80021fa:	2501      	movs	r5, #1
 80021fc:	600d      	str	r5, [r1, #0]
 80021fe:	680d      	ldr	r5, [r1, #0]
 8002200:	2d00      	cmp	r5, #0
 8002202:	d1fc      	bne.n	80021fe <ai_platform_network_create+0x1e>
 8002204:	491d      	ldr	r1, [pc, #116]	; (800227c <ai_platform_network_create+0x9c>)
 8002206:	4e1e      	ldr	r6, [pc, #120]	; (8002280 <ai_platform_network_create+0xa0>)
 8002208:	600e      	str	r6, [r1, #0]
 800220a:	680e      	ldr	r6, [r1, #0]
 800220c:	491d      	ldr	r1, [pc, #116]	; (8002284 <ai_platform_network_create+0xa4>)
 800220e:	428e      	cmp	r6, r1
 8002210:	d000      	beq.n	8002214 <ai_platform_network_create+0x34>
 8002212:	e7fe      	b.n	8002212 <ai_platform_network_create+0x32>
 8002214:	b1d0      	cbz	r0, 800224c <ai_platform_network_create+0x6c>
 8002216:	4698      	mov	r8, r3
 8002218:	4613      	mov	r3, r2
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <ai_platform_network_create+0xa8>)
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	6003      	str	r3, [r0, #0]
 8002220:	4606      	mov	r6, r0
 8002222:	f000 fb05 	bl	8002830 <core_init>
 8002226:	b1b0      	cbz	r0, 8002256 <ai_platform_network_create+0x76>
 8002228:	0223      	lsls	r3, r4, #8
 800222a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800222e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8002232:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8002236:	d910      	bls.n	800225a <ai_platform_network_create+0x7a>
 8002238:	2201      	movs	r2, #1
 800223a:	2300      	movs	r3, #0
 800223c:	6033      	str	r3, [r6, #0]
 800223e:	2310      	movs	r3, #16
 8002240:	2000      	movs	r0, #0
 8002242:	f362 0007 	bfi	r0, r2, #0, #8
 8002246:	f363 201f 	bfi	r0, r3, #8, #24
 800224a:	e001      	b.n	8002250 <ai_platform_network_create+0x70>
 800224c:	f241 0010 	movw	r0, #4112	; 0x1010
 8002250:	b002      	add	sp, #8
 8002252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002256:	2230      	movs	r2, #48	; 0x30
 8002258:	e7ef      	b.n	800223a <ai_platform_network_create+0x5a>
 800225a:	a802      	add	r0, sp, #8
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <ai_platform_network_create+0xac>)
 800225e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8002262:	f001 f849 	bl	80032f8 <ai_check_custom_types>
 8002266:	b110      	cbz	r0, 800226e <ai_platform_network_create+0x8e>
 8002268:	462b      	mov	r3, r5
 800226a:	462a      	mov	r2, r5
 800226c:	e7e8      	b.n	8002240 <ai_platform_network_create+0x60>
 800226e:	2202      	movs	r2, #2
 8002270:	e7e3      	b.n	800223a <ai_platform_network_create+0x5a>
 8002272:	bf00      	nop
 8002274:	e0002000 	.word	0xe0002000
 8002278:	40023008 	.word	0x40023008
 800227c:	40023000 	.word	0x40023000
 8002280:	f407a5c2 	.word	0xf407a5c2
 8002284:	b5e8b5cd 	.word	0xb5e8b5cd
 8002288:	a1c00100 	.word	0xa1c00100
 800228c:	84048403 	.word	0x84048403

08002290 <ai_platform_network_init>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	460c      	mov	r4, r1
 8002294:	4605      	mov	r5, r0
 8002296:	b120      	cbz	r0, 80022a2 <ai_platform_network_init+0x12>
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <ai_platform_network_init+0xe4>)
 800229a:	6802      	ldr	r2, [r0, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	bf18      	it	ne
 80022a0:	2500      	movne	r5, #0
 80022a2:	4935      	ldr	r1, [pc, #212]	; (8002378 <ai_platform_network_init+0xe8>)
 80022a4:	4a35      	ldr	r2, [pc, #212]	; (800237c <ai_platform_network_init+0xec>)
 80022a6:	680b      	ldr	r3, [r1, #0]
 80022a8:	2001      	movs	r0, #1
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	6010      	str	r0, [r2, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d1fc      	bne.n	80022b4 <ai_platform_network_init+0x24>
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <ai_platform_network_init+0xf0>)
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <ai_platform_network_init+0xf4>)
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <ai_platform_network_init+0xf8>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d000      	beq.n	80022ca <ai_platform_network_init+0x3a>
 80022c8:	e7fe      	b.n	80022c8 <ai_platform_network_init+0x38>
 80022ca:	b33d      	cbz	r5, 800231c <ai_platform_network_init+0x8c>
 80022cc:	b344      	cbz	r4, 8002320 <ai_platform_network_init+0x90>
 80022ce:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80022d0:	6926      	ldr	r6, [r4, #16]
 80022d2:	2f00      	cmp	r7, #0
 80022d4:	d03d      	beq.n	8002352 <ai_platform_network_init+0xc2>
 80022d6:	b35e      	cbz	r6, 8002330 <ai_platform_network_init+0xa0>
 80022d8:	4627      	mov	r7, r4
 80022da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80022dc:	f105 0618 	add.w	r6, r5, #24
 80022e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80022e6:	e886 0003 	stmia.w	r6, {r0, r1}
 80022ea:	3418      	adds	r4, #24
 80022ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ee:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80022f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f8:	e886 0003 	stmia.w	r6, {r0, r1}
 80022fc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80022fe:	2303      	movs	r3, #3
 8002300:	60eb      	str	r3, [r5, #12]
 8002302:	b15a      	cbz	r2, 800231c <ai_platform_network_init+0x8c>
 8002304:	68d3      	ldr	r3, [r2, #12]
 8002306:	6095      	str	r5, [r2, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d007      	beq.n	800231c <ai_platform_network_init+0x8c>
 800230c:	b133      	cbz	r3, 800231c <ai_platform_network_init+0x8c>
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	609d      	str	r5, [r3, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d002      	beq.n	800231c <ai_platform_network_init+0x8c>
 8002316:	4613      	mov	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f8      	bne.n	800230e <ai_platform_network_init+0x7e>
 800231c:	4628      	mov	r0, r5
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002320:	f105 0010 	add.w	r0, r5, #16
 8002324:	2211      	movs	r2, #17
 8002326:	2110      	movs	r1, #16
 8002328:	f000 fa84 	bl	8002834 <core_set_error>
 800232c:	4625      	mov	r5, r4
 800232e:	e7f5      	b.n	800231c <ai_platform_network_init+0x8c>
 8002330:	8921      	ldrh	r1, [r4, #8]
 8002332:	88e2      	ldrh	r2, [r4, #6]
 8002334:	68e3      	ldr	r3, [r4, #12]
 8002336:	fb02 f201 	mul.w	r2, r2, r1
 800233a:	fb03 f302 	mul.w	r3, r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0ca      	beq.n	80022d8 <ai_platform_network_init+0x48>
 8002342:	f105 0010 	add.w	r0, r5, #16
 8002346:	2212      	movs	r2, #18
 8002348:	2110      	movs	r1, #16
 800234a:	f000 fa73 	bl	8002834 <core_set_error>
 800234e:	4635      	mov	r5, r6
 8002350:	e7e4      	b.n	800231c <ai_platform_network_init+0x8c>
 8002352:	8c21      	ldrh	r1, [r4, #32]
 8002354:	8be2      	ldrh	r2, [r4, #30]
 8002356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002358:	fb02 f201 	mul.w	r2, r2, r1
 800235c:	fb03 f302 	mul.w	r3, r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0b8      	beq.n	80022d6 <ai_platform_network_init+0x46>
 8002364:	f105 0010 	add.w	r0, r5, #16
 8002368:	2213      	movs	r2, #19
 800236a:	2110      	movs	r1, #16
 800236c:	f000 fa62 	bl	8002834 <core_set_error>
 8002370:	463d      	mov	r5, r7
 8002372:	e7d3      	b.n	800231c <ai_platform_network_init+0x8c>
 8002374:	a1c00100 	.word	0xa1c00100
 8002378:	e0002000 	.word	0xe0002000
 800237c:	40023008 	.word	0x40023008
 8002380:	40023000 	.word	0x40023000
 8002384:	f407a5c2 	.word	0xf407a5c2
 8002388:	b5e8b5cd 	.word	0xb5e8b5cd

0800238c <ai_platform_network_post_init>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4604      	mov	r4, r0
 8002390:	b120      	cbz	r0, 800239c <ai_platform_network_post_init+0x10>
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <ai_platform_network_post_init+0x78>)
 8002394:	6802      	ldr	r2, [r0, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	bf18      	it	ne
 800239a:	2400      	movne	r4, #0
 800239c:	491a      	ldr	r1, [pc, #104]	; (8002408 <ai_platform_network_post_init+0x7c>)
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <ai_platform_network_post_init+0x80>)
 80023a0:	680b      	ldr	r3, [r1, #0]
 80023a2:	2001      	movs	r0, #1
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	600b      	str	r3, [r1, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	6010      	str	r0, [r2, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d1fc      	bne.n	80023ae <ai_platform_network_post_init+0x22>
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <ai_platform_network_post_init+0x84>)
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <ai_platform_network_post_init+0x88>)
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <ai_platform_network_post_init+0x8c>)
 80023be:	429a      	cmp	r2, r3
 80023c0:	d000      	beq.n	80023c4 <ai_platform_network_post_init+0x38>
 80023c2:	e7fe      	b.n	80023c2 <ai_platform_network_post_init+0x36>
 80023c4:	b1a4      	cbz	r4, 80023f0 <ai_platform_network_post_init+0x64>
 80023c6:	68e3      	ldr	r3, [r4, #12]
 80023c8:	f013 0502 	ands.w	r5, r3, #2
 80023cc:	d012      	beq.n	80023f4 <ai_platform_network_post_init+0x68>
 80023ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023d0:	b163      	cbz	r3, 80023ec <ai_platform_network_post_init+0x60>
 80023d2:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80023d4:	b91d      	cbnz	r5, 80023de <ai_platform_network_post_init+0x52>
 80023d6:	e009      	b.n	80023ec <ai_platform_network_post_init+0x60>
 80023d8:	461d      	mov	r5, r3
 80023da:	b13b      	cbz	r3, 80023ec <ai_platform_network_post_init+0x60>
 80023dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023e0:	4629      	mov	r1, r5
 80023e2:	2000      	movs	r0, #0
 80023e4:	4798      	blx	r3
 80023e6:	68eb      	ldr	r3, [r5, #12]
 80023e8:	42ab      	cmp	r3, r5
 80023ea:	d1f5      	bne.n	80023d8 <ai_platform_network_post_init+0x4c>
 80023ec:	2001      	movs	r0, #1
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	4620      	mov	r0, r4
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	f104 0010 	add.w	r0, r4, #16
 80023f8:	2210      	movs	r2, #16
 80023fa:	2111      	movs	r1, #17
 80023fc:	f000 fa1a 	bl	8002834 <core_set_error>
 8002400:	4628      	mov	r0, r5
 8002402:	bd38      	pop	{r3, r4, r5, pc}
 8002404:	a1c00100 	.word	0xa1c00100
 8002408:	e0002000 	.word	0xe0002000
 800240c:	40023008 	.word	0x40023008
 8002410:	40023000 	.word	0x40023000
 8002414:	f407a5c2 	.word	0xf407a5c2
 8002418:	b5e8b5cd 	.word	0xb5e8b5cd

0800241c <ai_platform_network_process>:
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002420:	b083      	sub	sp, #12
 8002422:	4604      	mov	r4, r0
 8002424:	9201      	str	r2, [sp, #4]
 8002426:	b120      	cbz	r0, 8002432 <ai_platform_network_process+0x16>
 8002428:	4ba5      	ldr	r3, [pc, #660]	; (80026c0 <ai_platform_network_process+0x2a4>)
 800242a:	6802      	ldr	r2, [r0, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	bf18      	it	ne
 8002430:	2400      	movne	r4, #0
 8002432:	48a4      	ldr	r0, [pc, #656]	; (80026c4 <ai_platform_network_process+0x2a8>)
 8002434:	4ba4      	ldr	r3, [pc, #656]	; (80026c8 <ai_platform_network_process+0x2ac>)
 8002436:	6802      	ldr	r2, [r0, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	6002      	str	r2, [r0, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2a00      	cmp	r2, #0
 8002446:	d1fc      	bne.n	8002442 <ai_platform_network_process+0x26>
 8002448:	4ba0      	ldr	r3, [pc, #640]	; (80026cc <ai_platform_network_process+0x2b0>)
 800244a:	4aa1      	ldr	r2, [pc, #644]	; (80026d0 <ai_platform_network_process+0x2b4>)
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4ba0      	ldr	r3, [pc, #640]	; (80026d4 <ai_platform_network_process+0x2b8>)
 8002452:	429a      	cmp	r2, r3
 8002454:	d000      	beq.n	8002458 <ai_platform_network_process+0x3c>
 8002456:	e7fe      	b.n	8002456 <ai_platform_network_process+0x3a>
 8002458:	2c00      	cmp	r4, #0
 800245a:	d066      	beq.n	800252a <ai_platform_network_process+0x10e>
 800245c:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8002460:	b107      	cbz	r7, 8002464 <ai_platform_network_process+0x48>
 8002462:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8002464:	68e3      	ldr	r3, [r4, #12]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2600      	movs	r6, #0
 800246c:	2b03      	cmp	r3, #3
 800246e:	6166      	str	r6, [r4, #20]
 8002470:	f040 80fe 	bne.w	8002670 <ai_platform_network_process+0x254>
 8002474:	2900      	cmp	r1, #0
 8002476:	d07f      	beq.n	8002578 <ai_platform_network_process+0x15c>
 8002478:	2f00      	cmp	r7, #0
 800247a:	d07d      	beq.n	8002578 <ai_platform_network_process+0x15c>
 800247c:	883b      	ldrh	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d07a      	beq.n	8002578 <ai_platform_network_process+0x15c>
 8002482:	460d      	mov	r5, r1
 8002484:	46a0      	mov	r8, r4
 8002486:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800248a:	429e      	cmp	r6, r3
 800248c:	d27d      	bcs.n	800258a <ai_platform_network_process+0x16e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d07a      	beq.n	800258a <ai_platform_network_process+0x16e>
 8002494:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8002498:	2c00      	cmp	r4, #0
 800249a:	d076      	beq.n	800258a <ai_platform_network_process+0x16e>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80024a4:	d067      	beq.n	8002576 <ai_platform_network_process+0x15a>
 80024a6:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80024aa:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80024ae:	69a0      	ldr	r0, [r4, #24]
 80024b0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80024b4:	6841      	ldr	r1, [r0, #4]
 80024b6:	fb0b f30e 	mul.w	r3, fp, lr
 80024ba:	fb0c f303 	mul.w	r3, ip, r3
 80024be:	4299      	cmp	r1, r3
 80024c0:	d350      	bcc.n	8002564 <ai_platform_network_process+0x148>
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	455a      	cmp	r2, fp
 80024c8:	d14c      	bne.n	8002564 <ai_platform_network_process+0x148>
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	4572      	cmp	r2, lr
 80024ce:	d149      	bne.n	8002564 <ai_platform_network_process+0x148>
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	459c      	cmp	ip, r3
 80024d4:	d146      	bne.n	8002564 <ai_platform_network_process+0x148>
 80024d6:	6800      	ldr	r0, [r0, #0]
 80024d8:	f000 ffbe 	bl	8003458 <ai_array_get_byte_size>
 80024dc:	68e2      	ldr	r2, [r4, #12]
 80024de:	6963      	ldr	r3, [r4, #20]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	fb03 f302 	mul.w	r3, r3, r2
 80024e8:	4298      	cmp	r0, r3
 80024ea:	d33b      	bcc.n	8002564 <ai_platform_network_process+0x148>
 80024ec:	69a3      	ldr	r3, [r4, #24]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	f000 ff66 	bl	80033c0 <ai_array_to_buffer_fmt>
 80024f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80024f8:	4043      	eors	r3, r0
 80024fa:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80024fe:	d128      	bne.n	8002552 <ai_platform_network_process+0x136>
 8002500:	68eb      	ldr	r3, [r5, #12]
 8002502:	b1f3      	cbz	r3, 8002542 <ai_platform_network_process+0x126>
 8002504:	f8b5 b000 	ldrh.w	fp, [r5]
 8002508:	f1bb 0f00 	cmp.w	fp, #0
 800250c:	d012      	beq.n	8002534 <ai_platform_network_process+0x118>
 800250e:	4623      	mov	r3, r4
 8002510:	f105 020c 	add.w	r2, r5, #12
 8002514:	4629      	mov	r1, r5
 8002516:	4650      	mov	r0, sl
 8002518:	f7ff fe42 	bl	80021a0 <_platform_network_state_setup.isra.1>
 800251c:	45d9      	cmp	r9, fp
 800251e:	883b      	ldrh	r3, [r7, #0]
 8002520:	bf38      	it	cc
 8002522:	46d9      	movcc	r9, fp
 8002524:	3601      	adds	r6, #1
 8002526:	3518      	adds	r5, #24
 8002528:	e7af      	b.n	800248a <ai_platform_network_process+0x6e>
 800252a:	46a3      	mov	fp, r4
 800252c:	4658      	mov	r0, fp
 800252e:	b003      	add	sp, #12
 8002530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002534:	f108 0010 	add.w	r0, r8, #16
 8002538:	2221      	movs	r2, #33	; 0x21
 800253a:	2112      	movs	r1, #18
 800253c:	f000 f97a 	bl	8002834 <core_set_error>
 8002540:	e7f4      	b.n	800252c <ai_platform_network_process+0x110>
 8002542:	f108 0010 	add.w	r0, r8, #16
 8002546:	2217      	movs	r2, #23
 8002548:	2112      	movs	r1, #18
 800254a:	469b      	mov	fp, r3
 800254c:	f000 f972 	bl	8002834 <core_set_error>
 8002550:	e7ec      	b.n	800252c <ai_platform_network_process+0x110>
 8002552:	f108 0010 	add.w	r0, r8, #16
 8002556:	2219      	movs	r2, #25
 8002558:	2112      	movs	r1, #18
 800255a:	f000 f96b 	bl	8002834 <core_set_error>
 800255e:	f04f 0b00 	mov.w	fp, #0
 8002562:	e7e3      	b.n	800252c <ai_platform_network_process+0x110>
 8002564:	f108 0010 	add.w	r0, r8, #16
 8002568:	2218      	movs	r2, #24
 800256a:	2112      	movs	r1, #18
 800256c:	f000 f962 	bl	8002834 <core_set_error>
 8002570:	f04f 0b00 	mov.w	fp, #0
 8002574:	e7da      	b.n	800252c <ai_platform_network_process+0x110>
 8002576:	4644      	mov	r4, r8
 8002578:	f104 0010 	add.w	r0, r4, #16
 800257c:	2217      	movs	r2, #23
 800257e:	2112      	movs	r1, #18
 8002580:	f000 f958 	bl	8002834 <core_set_error>
 8002584:	f04f 0b00 	mov.w	fp, #0
 8002588:	e7d0      	b.n	800252c <ai_platform_network_process+0x110>
 800258a:	9a01      	ldr	r2, [sp, #4]
 800258c:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8002590:	4644      	mov	r4, r8
 8002592:	2a00      	cmp	r2, #0
 8002594:	f000 80a4 	beq.w	80026e0 <ai_platform_network_process+0x2c4>
 8002598:	2b01      	cmp	r3, #1
 800259a:	f240 8140 	bls.w	800281e <ai_platform_network_process+0x402>
 800259e:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80025a2:	f118 0f0c 	cmn.w	r8, #12
 80025a6:	f000 813a 	beq.w	800281e <ai_platform_network_process+0x402>
 80025aa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8135 	beq.w	800281e <ai_platform_network_process+0x402>
 80025b4:	3204      	adds	r2, #4
 80025b6:	4615      	mov	r5, r2
 80025b8:	2700      	movs	r7, #0
 80025ba:	429f      	cmp	r7, r3
 80025bc:	f080 808c 	bcs.w	80026d8 <ai_platform_network_process+0x2bc>
 80025c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8087 	beq.w	80026d8 <ai_platform_network_process+0x2bc>
 80025ca:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80025ce:	2e00      	cmp	r6, #0
 80025d0:	f000 8082 	beq.w	80026d8 <ai_platform_network_process+0x2bc>
 80025d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80025de:	d067      	beq.n	80026b0 <ai_platform_network_process+0x294>
 80025e0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80025e4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80025e8:	69b0      	ldr	r0, [r6, #24]
 80025ea:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80025ee:	6841      	ldr	r1, [r0, #4]
 80025f0:	fb0b f30e 	mul.w	r3, fp, lr
 80025f4:	fb0c f303 	mul.w	r3, ip, r3
 80025f8:	4299      	cmp	r1, r3
 80025fa:	f0c0 8110 	bcc.w	800281e <ai_platform_network_process+0x402>
 80025fe:	68f3      	ldr	r3, [r6, #12]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	455a      	cmp	r2, fp
 8002604:	f040 810b 	bne.w	800281e <ai_platform_network_process+0x402>
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	4572      	cmp	r2, lr
 800260c:	f040 8107 	bne.w	800281e <ai_platform_network_process+0x402>
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	459c      	cmp	ip, r3
 8002614:	f040 8103 	bne.w	800281e <ai_platform_network_process+0x402>
 8002618:	6800      	ldr	r0, [r0, #0]
 800261a:	f000 ff1d 	bl	8003458 <ai_array_get_byte_size>
 800261e:	68f2      	ldr	r2, [r6, #12]
 8002620:	6973      	ldr	r3, [r6, #20]
 8002622:	68d2      	ldr	r2, [r2, #12]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	fb03 f302 	mul.w	r3, r3, r2
 800262a:	4298      	cmp	r0, r3
 800262c:	f0c0 80f7 	bcc.w	800281e <ai_platform_network_process+0x402>
 8002630:	69b3      	ldr	r3, [r6, #24]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	f000 fec4 	bl	80033c0 <ai_array_to_buffer_fmt>
 8002638:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800263c:	4043      	eors	r3, r0
 800263e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8002642:	d12c      	bne.n	800269e <ai_platform_network_process+0x282>
 8002644:	68eb      	ldr	r3, [r5, #12]
 8002646:	b313      	cbz	r3, 800268e <ai_platform_network_process+0x272>
 8002648:	f8b5 b000 	ldrh.w	fp, [r5]
 800264c:	f1bb 0f00 	cmp.w	fp, #0
 8002650:	d016      	beq.n	8002680 <ai_platform_network_process+0x264>
 8002652:	4633      	mov	r3, r6
 8002654:	f105 020c 	add.w	r2, r5, #12
 8002658:	4629      	mov	r1, r5
 800265a:	4650      	mov	r0, sl
 800265c:	f7ff fda0 	bl	80021a0 <_platform_network_state_setup.isra.1>
 8002660:	45d9      	cmp	r9, fp
 8002662:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002666:	bf38      	it	cc
 8002668:	46d9      	movcc	r9, fp
 800266a:	3701      	adds	r7, #1
 800266c:	3518      	adds	r5, #24
 800266e:	e7a4      	b.n	80025ba <ai_platform_network_process+0x19e>
 8002670:	f104 0010 	add.w	r0, r4, #16
 8002674:	2230      	movs	r2, #48	; 0x30
 8002676:	2111      	movs	r1, #17
 8002678:	f000 f8dc 	bl	8002834 <core_set_error>
 800267c:	46b3      	mov	fp, r6
 800267e:	e755      	b.n	800252c <ai_platform_network_process+0x110>
 8002680:	f104 0010 	add.w	r0, r4, #16
 8002684:	2221      	movs	r2, #33	; 0x21
 8002686:	2113      	movs	r1, #19
 8002688:	f000 f8d4 	bl	8002834 <core_set_error>
 800268c:	e74e      	b.n	800252c <ai_platform_network_process+0x110>
 800268e:	f104 0010 	add.w	r0, r4, #16
 8002692:	2217      	movs	r2, #23
 8002694:	2113      	movs	r1, #19
 8002696:	469b      	mov	fp, r3
 8002698:	f000 f8cc 	bl	8002834 <core_set_error>
 800269c:	e746      	b.n	800252c <ai_platform_network_process+0x110>
 800269e:	f104 0010 	add.w	r0, r4, #16
 80026a2:	2219      	movs	r2, #25
 80026a4:	2113      	movs	r1, #19
 80026a6:	f000 f8c5 	bl	8002834 <core_set_error>
 80026aa:	f04f 0b00 	mov.w	fp, #0
 80026ae:	e73d      	b.n	800252c <ai_platform_network_process+0x110>
 80026b0:	f104 0010 	add.w	r0, r4, #16
 80026b4:	2217      	movs	r2, #23
 80026b6:	2113      	movs	r1, #19
 80026b8:	f000 f8bc 	bl	8002834 <core_set_error>
 80026bc:	46d3      	mov	fp, sl
 80026be:	e735      	b.n	800252c <ai_platform_network_process+0x110>
 80026c0:	a1c00100 	.word	0xa1c00100
 80026c4:	e0002000 	.word	0xe0002000
 80026c8:	40023008 	.word	0x40023008
 80026cc:	40023000 	.word	0x40023000
 80026d0:	f407a5c2 	.word	0xf407a5c2
 80026d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80026d8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80026dc:	f8a4 9014 	strh.w	r9, [r4, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8099 	beq.w	8002818 <ai_platform_network_process+0x3fc>
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80026ea:	f240 8093 	bls.w	8002814 <ai_platform_network_process+0x3f8>
 80026ee:	f105 070c 	add.w	r7, r5, #12
 80026f2:	8ae0      	ldrh	r0, [r4, #22]
 80026f4:	8aa3      	ldrh	r3, [r4, #20]
 80026f6:	4283      	cmp	r3, r0
 80026f8:	d977      	bls.n	80027ea <ai_platform_network_process+0x3ce>
 80026fa:	46a3      	mov	fp, r4
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	d032      	beq.n	8002766 <ai_platform_network_process+0x34a>
 8002700:	882b      	ldrh	r3, [r5, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d02f      	beq.n	8002766 <ai_platform_network_process+0x34a>
 8002706:	686b      	ldr	r3, [r5, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02c      	beq.n	8002766 <ai_platform_network_process+0x34a>
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f04f 0800 	mov.w	r8, #0
 8002712:	b343      	cbz	r3, 8002766 <ai_platform_network_process+0x34a>
 8002714:	68a9      	ldr	r1, [r5, #8]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	f8d1 a000 	ldr.w	sl, [r1]
 800271c:	6814      	ldr	r4, [r2, #0]
 800271e:	6890      	ldr	r0, [r2, #8]
 8002720:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8002724:	eb0a 0609 	add.w	r6, sl, r9
 8002728:	00a4      	lsls	r4, r4, #2
 800272a:	6871      	ldr	r1, [r6, #4]
 800272c:	d45f      	bmi.n	80027ee <ai_platform_network_process+0x3d2>
 800272e:	68d4      	ldr	r4, [r2, #12]
 8002730:	1b00      	subs	r0, r0, r4
 8002732:	4401      	add	r1, r0
 8002734:	6091      	str	r1, [r2, #8]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	6872      	ldr	r2, [r6, #4]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8002740:	f85a 2009 	ldr.w	r2, [sl, r9]
 8002744:	440b      	add	r3, r1
 8002746:	4293      	cmp	r3, r2
 8002748:	bf24      	itt	cs
 800274a:	68f3      	ldrcs	r3, [r6, #12]
 800274c:	1ad3      	subcs	r3, r2, r3
 800274e:	6073      	str	r3, [r6, #4]
 8002750:	882b      	ldrh	r3, [r5, #0]
 8002752:	f108 0801 	add.w	r8, r8, #1
 8002756:	4598      	cmp	r8, r3
 8002758:	d205      	bcs.n	8002766 <ai_platform_network_process+0x34a>
 800275a:	686b      	ldr	r3, [r5, #4]
 800275c:	b11b      	cbz	r3, 8002766 <ai_platform_network_process+0x34a>
 800275e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1d6      	bne.n	8002714 <ai_platform_network_process+0x2f8>
 8002766:	4658      	mov	r0, fp
 8002768:	f000 fdf0 	bl	800334c <ai_layers_forward_all>
 800276c:	2f00      	cmp	r7, #0
 800276e:	d032      	beq.n	80027d6 <ai_platform_network_process+0x3ba>
 8002770:	883b      	ldrh	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02f      	beq.n	80027d6 <ai_platform_network_process+0x3ba>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	b36b      	cbz	r3, 80027d6 <ai_platform_network_process+0x3ba>
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	b358      	cbz	r0, 80027d6 <ai_platform_network_process+0x3ba>
 800277e:	f04f 0800 	mov.w	r8, #0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6981      	ldr	r1, [r0, #24]
 8002786:	f8d3 a000 	ldr.w	sl, [r3]
 800278a:	680c      	ldr	r4, [r1, #0]
 800278c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8002790:	eb0a 0609 	add.w	r6, sl, r9
 8002794:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8002798:	00a4      	lsls	r4, r4, #2
 800279a:	eb0c 0302 	add.w	r3, ip, r2
 800279e:	d42a      	bmi.n	80027f6 <ai_platform_network_process+0x3da>
 80027a0:	f85a 2009 	ldr.w	r2, [sl, r9]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf24      	itt	cs
 80027a8:	68f3      	ldrcs	r3, [r6, #12]
 80027aa:	1ad3      	subcs	r3, r2, r3
 80027ac:	6073      	str	r3, [r6, #4]
 80027ae:	6981      	ldr	r1, [r0, #24]
 80027b0:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80027b4:	1b12      	subs	r2, r2, r4
 80027b6:	4413      	add	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
 80027ba:	6983      	ldr	r3, [r0, #24]
 80027bc:	6872      	ldr	r2, [r6, #4]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	883b      	ldrh	r3, [r7, #0]
 80027c2:	f108 0801 	add.w	r8, r8, #1
 80027c6:	4598      	cmp	r8, r3
 80027c8:	d205      	bcs.n	80027d6 <ai_platform_network_process+0x3ba>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	b11b      	cbz	r3, 80027d6 <ai_platform_network_process+0x3ba>
 80027ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d1d5      	bne.n	8002782 <ai_platform_network_process+0x366>
 80027d6:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80027da:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80027de:	3001      	adds	r0, #1
 80027e0:	b280      	uxth	r0, r0
 80027e2:	4283      	cmp	r3, r0
 80027e4:	f8ab 0016 	strh.w	r0, [fp, #22]
 80027e8:	d888      	bhi.n	80026fc <ai_platform_network_process+0x2e0>
 80027ea:	4683      	mov	fp, r0
 80027ec:	e69e      	b.n	800252c <ai_platform_network_process+0x110>
 80027ee:	68b2      	ldr	r2, [r6, #8]
 80027f0:	f000 fe7e 	bl	80034f0 <memcpy>
 80027f4:	e7a2      	b.n	800273c <ai_platform_network_process+0x320>
 80027f6:	6889      	ldr	r1, [r1, #8]
 80027f8:	4660      	mov	r0, ip
 80027fa:	f000 fe79 	bl	80034f0 <memcpy>
 80027fe:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8002802:	f85a 2009 	ldr.w	r2, [sl, r9]
 8002806:	440b      	add	r3, r1
 8002808:	4293      	cmp	r3, r2
 800280a:	bf24      	itt	cs
 800280c:	68f3      	ldrcs	r3, [r6, #12]
 800280e:	1ad3      	subcs	r3, r2, r3
 8002810:	6073      	str	r3, [r6, #4]
 8002812:	e7d5      	b.n	80027c0 <ai_platform_network_process+0x3a4>
 8002814:	2700      	movs	r7, #0
 8002816:	e76c      	b.n	80026f2 <ai_platform_network_process+0x2d6>
 8002818:	461d      	mov	r5, r3
 800281a:	461f      	mov	r7, r3
 800281c:	e769      	b.n	80026f2 <ai_platform_network_process+0x2d6>
 800281e:	f104 0010 	add.w	r0, r4, #16
 8002822:	2218      	movs	r2, #24
 8002824:	2113      	movs	r1, #19
 8002826:	f000 f805 	bl	8002834 <core_set_error>
 800282a:	f04f 0b00 	mov.w	fp, #0
 800282e:	e67d      	b.n	800252c <ai_platform_network_process+0x110>

08002830 <core_init>:
 8002830:	2001      	movs	r0, #1
 8002832:	4770      	bx	lr

08002834 <core_set_error>:
 8002834:	7803      	ldrb	r3, [r0, #0]
 8002836:	b933      	cbnz	r3, 8002846 <core_set_error+0x12>
 8002838:	7001      	strb	r1, [r0, #0]
 800283a:	6803      	ldr	r3, [r0, #0]
 800283c:	f362 231f 	bfi	r3, r2, #8, #24
 8002840:	6003      	str	r3, [r0, #0]
 8002842:	2001      	movs	r0, #1
 8002844:	4770      	bx	lr
 8002846:	2000      	movs	r0, #0
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <ai_dict8_dot_array_f32>:
 800284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002850:	f8dd c020 	ldr.w	ip, [sp, #32]
 8002854:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8002858:	f000 80c0 	beq.w	80029dc <ai_dict8_dot_array_f32+0x190>
 800285c:	f101 0408 	add.w	r4, r1, #8
 8002860:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8002864:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80029e4 <ai_dict8_dot_array_f32+0x198>
 8002868:	eb04 0e09 	add.w	lr, r4, r9
 800286c:	f103 0520 	add.w	r5, r3, #32
 8002870:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8002874:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8002878:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800287c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8002880:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8002884:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8002888:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800288c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8002890:	ed55 4a03 	vldr	s9, [r5, #-12]
 8002894:	ed55 5a02 	vldr	s11, [r5, #-8]
 8002898:	ed55 6a01 	vldr	s13, [r5, #-4]
 800289c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80028a0:	edd6 7a00 	vldr	s15, [r6]
 80028a4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80028a8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80028ac:	ee67 7a83 	vmul.f32	s15, s15, s6
 80028b0:	ed9a 3a00 	vldr	s6, [sl]
 80028b4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80028b8:	eee3 7a05 	vfma.f32	s15, s6, s10
 80028bc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80028c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80028c4:	ed97 3a00 	vldr	s6, [r7]
 80028c8:	ed96 5a00 	vldr	s10, [r6]
 80028cc:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80028d0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80028d4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80028d8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80028dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80028e0:	ed9a 3a00 	vldr	s6, [sl]
 80028e4:	ed96 4a00 	vldr	s8, [r6]
 80028e8:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80028ec:	eee5 7a06 	vfma.f32	s15, s10, s12
 80028f0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80028f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80028f8:	ed97 5a00 	vldr	s10, [r7]
 80028fc:	ed96 6a00 	vldr	s12, [r6]
 8002900:	eee3 7a23 	vfma.f32	s15, s6, s7
 8002904:	3408      	adds	r4, #8
 8002906:	45a6      	cmp	lr, r4
 8002908:	f105 0520 	add.w	r5, r5, #32
 800290c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002910:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002914:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	d1a8      	bne.n	8002870 <ai_dict8_dot_array_f32+0x24>
 800291e:	4449      	add	r1, r9
 8002920:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8002924:	f01c 0c07 	ands.w	ip, ip, #7
 8002928:	d050      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 800292a:	780c      	ldrb	r4, [r1, #0]
 800292c:	edd3 6a00 	vldr	s13, [r3]
 8002930:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002934:	edd4 7a00 	vldr	s15, [r4]
 8002938:	f1bc 0f01 	cmp.w	ip, #1
 800293c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002940:	d044      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 8002942:	784c      	ldrb	r4, [r1, #1]
 8002944:	edd3 6a01 	vldr	s13, [r3, #4]
 8002948:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800294c:	edd4 7a00 	vldr	s15, [r4]
 8002950:	f1bc 0f02 	cmp.w	ip, #2
 8002954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002958:	d038      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 800295a:	788c      	ldrb	r4, [r1, #2]
 800295c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002960:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002964:	edd4 7a00 	vldr	s15, [r4]
 8002968:	f1bc 0f03 	cmp.w	ip, #3
 800296c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002970:	d02c      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 8002972:	78cc      	ldrb	r4, [r1, #3]
 8002974:	edd3 6a03 	vldr	s13, [r3, #12]
 8002978:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800297c:	edd4 7a00 	vldr	s15, [r4]
 8002980:	f1bc 0f04 	cmp.w	ip, #4
 8002984:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002988:	d020      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 800298a:	790c      	ldrb	r4, [r1, #4]
 800298c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002990:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002994:	edd4 7a00 	vldr	s15, [r4]
 8002998:	f1bc 0f05 	cmp.w	ip, #5
 800299c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80029a0:	d014      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 80029a2:	794c      	ldrb	r4, [r1, #5]
 80029a4:	edd3 6a05 	vldr	s13, [r3, #20]
 80029a8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80029ac:	edd4 7a00 	vldr	s15, [r4]
 80029b0:	f1bc 0f06 	cmp.w	ip, #6
 80029b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80029b8:	d008      	beq.n	80029cc <ai_dict8_dot_array_f32+0x180>
 80029ba:	7989      	ldrb	r1, [r1, #6]
 80029bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80029c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80029c4:	edd2 6a00 	vldr	s13, [r2]
 80029c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80029cc:	edd0 7a00 	vldr	s15, [r0]
 80029d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029d4:	ed80 7a00 	vstr	s14, [r0]
 80029d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029dc:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80029e4 <ai_dict8_dot_array_f32+0x198>
 80029e0:	e7a0      	b.n	8002924 <ai_dict8_dot_array_f32+0xd8>
 80029e2:	bf00      	nop
 80029e4:	00000000 	.word	0x00000000

080029e8 <ai_dict4_dot_array_f32>:
 80029e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80029ee:	f027 0c01 	bic.w	ip, r7, #1
 80029f2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80029f6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80029fa:	f000 80ae 	beq.w	8002b5a <ai_dict4_dot_array_f32+0x172>
 80029fe:	1d0d      	adds	r5, r1, #4
 8002a00:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8002a04:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002b60 <ai_dict4_dot_array_f32+0x178>
 8002a08:	eb05 0e09 	add.w	lr, r5, r9
 8002a0c:	f103 0420 	add.w	r4, r3, #32
 8002a10:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8002a14:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8002a18:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8002a1c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8002a20:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8002a24:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8002a28:	ed14 5a04 	vldr	s10, [r4, #-16]
 8002a2c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8002a30:	ed14 6a02 	vldr	s12, [r4, #-8]
 8002a34:	ed54 6a01 	vldr	s13, [r4, #-4]
 8002a38:	f006 0a0f 	and.w	sl, r6, #15
 8002a3c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8002a40:	edda 7a00 	vldr	s15, [sl]
 8002a44:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8002a48:	0936      	lsrs	r6, r6, #4
 8002a4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002a4e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8002a52:	ed96 3a00 	vldr	s6, [r6]
 8002a56:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8002a5a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8002a5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002a62:	f00b 0b0f 	and.w	fp, fp, #15
 8002a66:	edd6 3a00 	vldr	s7, [r6]
 8002a6a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8002a6e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8002a72:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8002a76:	3504      	adds	r5, #4
 8002a78:	ed9b 4a00 	vldr	s8, [fp]
 8002a7c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8002a80:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002a84:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8002a88:	f00a 0a0f 	and.w	sl, sl, #15
 8002a8c:	eddb 4a00 	vldr	s9, [fp]
 8002a90:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002a94:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8002a98:	45ae      	cmp	lr, r5
 8002a9a:	ed9a 5a00 	vldr	s10, [sl]
 8002a9e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8002aa2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002aa6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8002aaa:	f006 060f 	and.w	r6, r6, #15
 8002aae:	edda 5a00 	vldr	s11, [sl]
 8002ab2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002ab6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002aba:	f104 0420 	add.w	r4, r4, #32
 8002abe:	ed96 6a00 	vldr	s12, [r6]
 8002ac2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aca:	d1a1      	bne.n	8002a10 <ai_dict4_dot_array_f32+0x28>
 8002acc:	4449      	add	r1, r9
 8002ace:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8002ad2:	459c      	cmp	ip, r3
 8002ad4:	d92d      	bls.n	8002b32 <ai_dict4_dot_array_f32+0x14a>
 8002ad6:	f10c 0c07 	add.w	ip, ip, #7
 8002ada:	f103 0508 	add.w	r5, r3, #8
 8002ade:	ebac 0c05 	sub.w	ip, ip, r5
 8002ae2:	f02c 0407 	bic.w	r4, ip, #7
 8002ae6:	f103 0810 	add.w	r8, r3, #16
 8002aea:	44a0      	add	r8, r4
 8002aec:	f101 3eff 	add.w	lr, r1, #4294967295
 8002af0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8002af4:	ed15 6a01 	vldr	s12, [r5, #-4]
 8002af8:	ed55 6a02 	vldr	s13, [r5, #-8]
 8002afc:	f004 060f 	and.w	r6, r4, #15
 8002b00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002b04:	0924      	lsrs	r4, r4, #4
 8002b06:	edd6 7a00 	vldr	s15, [r6]
 8002b0a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002b0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b12:	ed94 6a00 	vldr	s12, [r4]
 8002b16:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002b1a:	3508      	adds	r5, #8
 8002b1c:	45a8      	cmp	r8, r5
 8002b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b22:	d1e5      	bne.n	8002af0 <ai_dict4_dot_array_f32+0x108>
 8002b24:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8002b28:	f10c 0c01 	add.w	ip, ip, #1
 8002b2c:	4461      	add	r1, ip
 8002b2e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002b32:	07fc      	lsls	r4, r7, #31
 8002b34:	d509      	bpl.n	8002b4a <ai_dict4_dot_array_f32+0x162>
 8002b36:	7809      	ldrb	r1, [r1, #0]
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	090b      	lsrs	r3, r1, #4
 8002b3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002b42:	edd2 6a00 	vldr	s13, [r2]
 8002b46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002b4a:	edd0 7a00 	vldr	s15, [r0]
 8002b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b52:	ed80 7a00 	vstr	s14, [r0]
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8002b60 <ai_dict4_dot_array_f32+0x178>
 8002b5e:	e7b8      	b.n	8002ad2 <ai_dict4_dot_array_f32+0xea>
 8002b60:	00000000 	.word	0x00000000

08002b64 <forward_dense>:
 8002b64:	6942      	ldr	r2, [r0, #20]
 8002b66:	8813      	ldrh	r3, [r2, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 81ca 	beq.w	8002f02 <forward_dense+0x39e>
 8002b6e:	6852      	ldr	r2, [r2, #4]
 8002b70:	6850      	ldr	r0, [r2, #4]
 8002b72:	b100      	cbz	r0, 8002b76 <forward_dense+0x12>
 8002b74:	6800      	ldr	r0, [r0, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	f240 81c0 	bls.w	8002efc <forward_dense+0x398>
 8002b7c:	6911      	ldr	r1, [r2, #16]
 8002b7e:	b101      	cbz	r1, 8002b82 <forward_dense+0x1e>
 8002b80:	6809      	ldr	r1, [r1, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	f000 81bf 	beq.w	8002f06 <forward_dense+0x3a2>
 8002b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8c:	ed2d 8b10 	vpush	{d8-d15}
 8002b90:	69d3      	ldr	r3, [r2, #28]
 8002b92:	b091      	sub	sp, #68	; 0x44
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 820b 	beq.w	8002fb0 <forward_dense+0x44c>
 8002b9a:	681c      	ldr	r4, [r3, #0]
 8002b9c:	9408      	str	r4, [sp, #32]
 8002b9e:	f112 0418 	adds.w	r4, r2, #24
 8002ba2:	f000 81df 	beq.w	8002f64 <forward_dense+0x400>
 8002ba6:	8b12      	ldrh	r2, [r2, #24]
 8002ba8:	2a01      	cmp	r2, #1
 8002baa:	f240 81fe 	bls.w	8002faa <forward_dense+0x446>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 81da 	beq.w	8002f68 <forward_dense+0x404>
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	9306      	str	r3, [sp, #24]
 8002bb8:	9b08      	ldr	r3, [sp, #32]
 8002bba:	68cc      	ldr	r4, [r1, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	68c5      	ldr	r5, [r0, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8002bc6:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8002bca:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8002bce:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8002bd2:	fa4c f505 	asr.w	r5, ip, r5
 8002bd6:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8002bda:	950b      	str	r5, [sp, #44]	; 0x2c
 8002bdc:	2a04      	cmp	r2, #4
 8002bde:	fb07 f506 	mul.w	r5, r7, r6
 8002be2:	6864      	ldr	r4, [r4, #4]
 8002be4:	9507      	str	r5, [sp, #28]
 8002be6:	f000 81dd 	beq.w	8002fa4 <forward_dense+0x440>
 8002bea:	2a08      	cmp	r2, #8
 8002bec:	f000 81da 	beq.w	8002fa4 <forward_dense+0x440>
 8002bf0:	f04f 0a00 	mov.w	sl, #0
 8002bf4:	698a      	ldr	r2, [r1, #24]
 8002bf6:	6981      	ldr	r1, [r0, #24]
 8002bf8:	6890      	ldr	r0, [r2, #8]
 8002bfa:	9a08      	ldr	r2, [sp, #32]
 8002bfc:	9004      	str	r0, [sp, #16]
 8002bfe:	6952      	ldr	r2, [r2, #20]
 8002c00:	688f      	ldr	r7, [r1, #8]
 8002c02:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8002c06:	00a2      	lsls	r2, r4, #2
 8002c08:	9209      	str	r2, [sp, #36]	; 0x24
 8002c0a:	1886      	adds	r6, r0, r2
 8002c0c:	9a07      	ldr	r2, [sp, #28]
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	f000 81c3 	beq.w	8002f9a <forward_dense+0x436>
 8002c14:	f1a8 0210 	sub.w	r2, r8, #16
 8002c18:	0912      	lsrs	r2, r2, #4
 8002c1a:	3201      	adds	r2, #1
 8002c1c:	0192      	lsls	r2, r2, #6
 8002c1e:	920c      	str	r2, [sp, #48]	; 0x30
 8002c20:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002c24:	920a      	str	r2, [sp, #40]	; 0x28
 8002c26:	689d      	ldr	r5, [r3, #8]
 8002c28:	9b06      	ldr	r3, [sp, #24]
 8002c2a:	eddf aad0 	vldr	s21, [pc, #832]	; 8002f6c <forward_dense+0x408>
 8002c2e:	2200      	movs	r2, #0
 8002c30:	9205      	str	r2, [sp, #20]
 8002c32:	f008 020f 	and.w	r2, r8, #15
 8002c36:	920d      	str	r2, [sp, #52]	; 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d043      	beq.n	8002cc4 <forward_dense+0x160>
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	689c      	ldr	r4, [r3, #8]
 8002c40:	9b04      	ldr	r3, [sp, #16]
 8002c42:	f1ba 0f00 	cmp.w	sl, #0
 8002c46:	d042      	beq.n	8002cce <forward_dense+0x16a>
 8002c48:	42b3      	cmp	r3, r6
 8002c4a:	d22a      	bcs.n	8002ca2 <forward_dense+0x13e>
 8002c4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002c4e:	469b      	mov	fp, r3
 8002c50:	ab0f      	add	r3, sp, #60	; 0x3c
 8002c52:	9303      	str	r3, [sp, #12]
 8002c54:	2a04      	cmp	r2, #4
 8002c56:	4633      	mov	r3, r6
 8002c58:	4646      	mov	r6, r8
 8002c5a:	4698      	mov	r8, r3
 8002c5c:	f000 8156 	beq.w	8002f0c <forward_dense+0x3a8>
 8002c60:	2c00      	cmp	r4, #0
 8002c62:	f000 8185 	beq.w	8002f70 <forward_dense+0x40c>
 8002c66:	f8d4 c000 	ldr.w	ip, [r4]
 8002c6a:	9803      	ldr	r0, [sp, #12]
 8002c6c:	9600      	str	r6, [sp, #0]
 8002c6e:	463b      	mov	r3, r7
 8002c70:	4629      	mov	r1, r5
 8002c72:	4652      	mov	r2, sl
 8002c74:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8002c78:	f7ff fde8 	bl	800284c <ai_dict8_dot_array_f32>
 8002c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c7e:	f84b 3b04 	str.w	r3, [fp], #4
 8002c82:	45c3      	cmp	fp, r8
 8002c84:	f104 0404 	add.w	r4, r4, #4
 8002c88:	444d      	add	r5, r9
 8002c8a:	d3e9      	bcc.n	8002c60 <forward_dense+0xfc>
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	46b0      	mov	r8, r6
 8002c90:	461e      	mov	r6, r3
 8002c92:	9a04      	ldr	r2, [sp, #16]
 8002c94:	43d3      	mvns	r3, r2
 8002c96:	4433      	add	r3, r6
 8002c98:	f023 0303 	bic.w	r3, r3, #3
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	18d3      	adds	r3, r2, r3
 8002ca0:	9304      	str	r3, [sp, #16]
 8002ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ca4:	9b05      	ldr	r3, [sp, #20]
 8002ca6:	4417      	add	r7, r2
 8002ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002caa:	4416      	add	r6, r2
 8002cac:	9a07      	ldr	r2, [sp, #28]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	9305      	str	r3, [sp, #20]
 8002cb4:	f000 8171 	beq.w	8002f9a <forward_dense+0x436>
 8002cb8:	9b08      	ldr	r3, [sp, #32]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	689d      	ldr	r5, [r3, #8]
 8002cbe:	9b06      	ldr	r3, [sp, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1bb      	bne.n	8002c3c <forward_dense+0xd8>
 8002cc4:	461c      	mov	r4, r3
 8002cc6:	9b04      	ldr	r3, [sp, #16]
 8002cc8:	f1ba 0f00 	cmp.w	sl, #0
 8002ccc:	d1bc      	bne.n	8002c48 <forward_dense+0xe4>
 8002cce:	42b3      	cmp	r3, r6
 8002cd0:	d2e7      	bcs.n	8002ca2 <forward_dense+0x13e>
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cd6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8002cda:	eb07 0c03 	add.w	ip, r7, r3
 8002cde:	469e      	mov	lr, r3
 8002ce0:	2c00      	cmp	r4, #0
 8002ce2:	f000 80ff 	beq.w	8002ee4 <forward_dense+0x380>
 8002ce6:	f1b8 0f0f 	cmp.w	r8, #15
 8002cea:	edd4 fa00 	vldr	s31, [r4]
 8002cee:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002f6c <forward_dense+0x408>
 8002cf2:	f104 0404 	add.w	r4, r4, #4
 8002cf6:	f240 80fd 	bls.w	8002ef4 <forward_dense+0x390>
 8002cfa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002cfe:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8002d02:	4641      	mov	r1, r8
 8002d04:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8002d08:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8002d0c:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8002d10:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8002d14:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8002d18:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8002d1c:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8002d20:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8002d24:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8002d28:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8002d2c:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8002d30:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8002d34:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8002d38:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8002d3c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8002d40:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8002d44:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8002d48:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8002d4c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8002d50:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8002d54:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8002d58:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8002d5c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8002d60:	ed13 4a04 	vldr	s8, [r3, #-16]
 8002d64:	ed52 4a04 	vldr	s9, [r2, #-16]
 8002d68:	ed12 5a03 	vldr	s10, [r2, #-12]
 8002d6c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8002d70:	ed12 6a02 	vldr	s12, [r2, #-8]
 8002d74:	ed13 7a02 	vldr	s14, [r3, #-8]
 8002d78:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8002d7c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8002d80:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8002d84:	3910      	subs	r1, #16
 8002d86:	290f      	cmp	r1, #15
 8002d88:	ed53 ea01 	vldr	s29, [r3, #-4]
 8002d8c:	ed12 ea01 	vldr	s28, [r2, #-4]
 8002d90:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8002d94:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8002d98:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8002d9c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8002da0:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8002da4:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8002da8:	eee9 7a89 	vfma.f32	s15, s19, s18
 8002dac:	eee8 7a88 	vfma.f32	s15, s17, s16
 8002db0:	eee0 7a20 	vfma.f32	s15, s0, s1
 8002db4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8002db8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8002dbc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8002dc0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002dc4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002dc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002dcc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8002dd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dd4:	d896      	bhi.n	8002d04 <forward_dense+0x1a0>
 8002dd6:	eb05 010e 	add.w	r1, r5, lr
 8002dda:	465b      	mov	r3, fp
 8002ddc:	4662      	mov	r2, ip
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d075      	beq.n	8002ece <forward_dense+0x36a>
 8002de2:	ed91 7a00 	vldr	s14, [r1]
 8002de6:	edd2 7a00 	vldr	s15, [r2]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002df0:	d06d      	beq.n	8002ece <forward_dense+0x36a>
 8002df2:	ed91 7a01 	vldr	s14, [r1, #4]
 8002df6:	edd2 7a01 	vldr	s15, [r2, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e00:	d065      	beq.n	8002ece <forward_dense+0x36a>
 8002e02:	ed91 7a02 	vldr	s14, [r1, #8]
 8002e06:	edd2 7a02 	vldr	s15, [r2, #8]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e10:	d05d      	beq.n	8002ece <forward_dense+0x36a>
 8002e12:	ed91 7a03 	vldr	s14, [r1, #12]
 8002e16:	edd2 7a03 	vldr	s15, [r2, #12]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e20:	d055      	beq.n	8002ece <forward_dense+0x36a>
 8002e22:	ed91 7a04 	vldr	s14, [r1, #16]
 8002e26:	edd2 7a04 	vldr	s15, [r2, #16]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e30:	d04d      	beq.n	8002ece <forward_dense+0x36a>
 8002e32:	ed91 7a05 	vldr	s14, [r1, #20]
 8002e36:	edd2 7a05 	vldr	s15, [r2, #20]
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e40:	d045      	beq.n	8002ece <forward_dense+0x36a>
 8002e42:	ed91 7a06 	vldr	s14, [r1, #24]
 8002e46:	edd2 7a06 	vldr	s15, [r2, #24]
 8002e4a:	2b07      	cmp	r3, #7
 8002e4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e50:	d03d      	beq.n	8002ece <forward_dense+0x36a>
 8002e52:	ed91 7a07 	vldr	s14, [r1, #28]
 8002e56:	edd2 7a07 	vldr	s15, [r2, #28]
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e60:	d035      	beq.n	8002ece <forward_dense+0x36a>
 8002e62:	ed91 7a08 	vldr	s14, [r1, #32]
 8002e66:	edd2 7a08 	vldr	s15, [r2, #32]
 8002e6a:	2b09      	cmp	r3, #9
 8002e6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e70:	d02d      	beq.n	8002ece <forward_dense+0x36a>
 8002e72:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8002e76:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e80:	d025      	beq.n	8002ece <forward_dense+0x36a>
 8002e82:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8002e86:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8002e8a:	2b0b      	cmp	r3, #11
 8002e8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002e90:	d01d      	beq.n	8002ece <forward_dense+0x36a>
 8002e92:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8002e96:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002ea0:	d015      	beq.n	8002ece <forward_dense+0x36a>
 8002ea2:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8002ea6:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8002eaa:	2b0d      	cmp	r3, #13
 8002eac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002eb0:	d00d      	beq.n	8002ece <forward_dense+0x36a>
 8002eb2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8002eb6:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8002eba:	2b0e      	cmp	r3, #14
 8002ebc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002ec0:	d005      	beq.n	8002ece <forward_dense+0x36a>
 8002ec2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8002ec6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8002eca:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002ece:	444d      	add	r5, r9
 8002ed0:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8002ed4:	ece0 6a01 	vstmia	r0!, {s13}
 8002ed8:	42b0      	cmp	r0, r6
 8002eda:	f4bf aeda 	bcs.w	8002c92 <forward_dense+0x12e>
 8002ede:	2c00      	cmp	r4, #0
 8002ee0:	f47f af01 	bne.w	8002ce6 <forward_dense+0x182>
 8002ee4:	f1b8 0f0f 	cmp.w	r8, #15
 8002ee8:	eef0 fa6a 	vmov.f32	s31, s21
 8002eec:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002f6c <forward_dense+0x408>
 8002ef0:	f63f af03 	bhi.w	8002cfa <forward_dense+0x196>
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	463a      	mov	r2, r7
 8002efa:	e770      	b.n	8002dde <forward_dense+0x27a>
 8002efc:	2300      	movs	r3, #0
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	deff      	udf	#255	; 0xff
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	deff      	udf	#255	; 0xff
 8002f06:	2300      	movs	r3, #0
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	deff      	udf	#255	; 0xff
 8002f0c:	b1ac      	cbz	r4, 8002f3a <forward_dense+0x3d6>
 8002f0e:	f8d4 c000 	ldr.w	ip, [r4]
 8002f12:	9803      	ldr	r0, [sp, #12]
 8002f14:	9600      	str	r6, [sp, #0]
 8002f16:	463b      	mov	r3, r7
 8002f18:	4629      	mov	r1, r5
 8002f1a:	4652      	mov	r2, sl
 8002f1c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8002f20:	f7ff fd62 	bl	80029e8 <ai_dict4_dot_array_f32>
 8002f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f26:	f84b 3b04 	str.w	r3, [fp], #4
 8002f2a:	45c3      	cmp	fp, r8
 8002f2c:	f104 0404 	add.w	r4, r4, #4
 8002f30:	444d      	add	r5, r9
 8002f32:	f4bf aeab 	bcs.w	8002c8c <forward_dense+0x128>
 8002f36:	2c00      	cmp	r4, #0
 8002f38:	d1e9      	bne.n	8002f0e <forward_dense+0x3aa>
 8002f3a:	4634      	mov	r4, r6
 8002f3c:	4646      	mov	r6, r8
 8002f3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002f42:	9400      	str	r4, [sp, #0]
 8002f44:	463b      	mov	r3, r7
 8002f46:	4629      	mov	r1, r5
 8002f48:	4652      	mov	r2, sl
 8002f4a:	4640      	mov	r0, r8
 8002f4c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8002f50:	f7ff fd4a 	bl	80029e8 <ai_dict4_dot_array_f32>
 8002f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f56:	f84b 3b04 	str.w	r3, [fp], #4
 8002f5a:	45b3      	cmp	fp, r6
 8002f5c:	444d      	add	r5, r9
 8002f5e:	d3f0      	bcc.n	8002f42 <forward_dense+0x3de>
 8002f60:	46a0      	mov	r8, r4
 8002f62:	e696      	b.n	8002c92 <forward_dense+0x12e>
 8002f64:	9406      	str	r4, [sp, #24]
 8002f66:	e627      	b.n	8002bb8 <forward_dense+0x54>
 8002f68:	9306      	str	r3, [sp, #24]
 8002f6a:	e625      	b.n	8002bb8 <forward_dense+0x54>
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	4634      	mov	r4, r6
 8002f72:	4646      	mov	r6, r8
 8002f74:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002f78:	9400      	str	r4, [sp, #0]
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4652      	mov	r2, sl
 8002f80:	4640      	mov	r0, r8
 8002f82:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8002f86:	f7ff fc61 	bl	800284c <ai_dict8_dot_array_f32>
 8002f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f8c:	f84b 3b04 	str.w	r3, [fp], #4
 8002f90:	45b3      	cmp	fp, r6
 8002f92:	444d      	add	r5, r9
 8002f94:	d3f0      	bcc.n	8002f78 <forward_dense+0x414>
 8002f96:	46a0      	mov	r8, r4
 8002f98:	e67b      	b.n	8002c92 <forward_dense+0x12e>
 8002f9a:	b011      	add	sp, #68	; 0x44
 8002f9c:	ecbd 8b10 	vpop	{d8-d15}
 8002fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8002fa8:	e624      	b.n	8002bf4 <forward_dense+0x90>
 8002faa:	2300      	movs	r3, #0
 8002fac:	9306      	str	r3, [sp, #24]
 8002fae:	e603      	b.n	8002bb8 <forward_dense+0x54>
 8002fb0:	9308      	str	r3, [sp, #32]
 8002fb2:	e5f4      	b.n	8002b9e <forward_dense+0x3a>

08002fb4 <nl_func_relu_generic_array_f32>:
 8002fb4:	b430      	push	{r4, r5}
 8002fb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fba:	6880      	ldr	r0, [r0, #8]
 8002fbc:	688c      	ldr	r4, [r1, #8]
 8002fbe:	ed93 7a00 	vldr	s14, [r3]
 8002fc2:	ed93 6a01 	vldr	s12, [r3, #4]
 8002fc6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	4410      	add	r0, r2
 8002fd8:	4422      	add	r2, r4
 8002fda:	d421      	bmi.n	8003020 <nl_func_relu_generic_array_f32+0x6c>
 8002fdc:	42a2      	cmp	r2, r4
 8002fde:	d33d      	bcc.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 8002fe0:	1d13      	adds	r3, r2, #4
 8002fe2:	1d02      	adds	r2, r0, #4
 8002fe4:	e010      	b.n	8003008 <nl_func_relu_generic_array_f32+0x54>
 8002fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8002ff2:	dd01      	ble.n	8002ff8 <nl_func_relu_generic_array_f32+0x44>
 8002ff4:	ee65 7a86 	vmul.f32	s15, s11, s12
 8002ff8:	ed62 7a01 	vstmdb	r2!, {s15}
 8002ffc:	6888      	ldr	r0, [r1, #8]
 8002ffe:	f1a3 0408 	sub.w	r4, r3, #8
 8003002:	4284      	cmp	r4, r0
 8003004:	462b      	mov	r3, r5
 8003006:	d329      	bcc.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 8003008:	ed53 7a01 	vldr	s15, [r3, #-4]
 800300c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	f1a3 0504 	sub.w	r5, r3, #4
 8003018:	dce5      	bgt.n	8002fe6 <nl_func_relu_generic_array_f32+0x32>
 800301a:	eef0 7a66 	vmov.f32	s15, s13
 800301e:	e7eb      	b.n	8002ff8 <nl_func_relu_generic_array_f32+0x44>
 8003020:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	d01a      	beq.n	8003060 <nl_func_relu_generic_array_f32+0xac>
 800302a:	42a2      	cmp	r2, r4
 800302c:	d316      	bcc.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 800302e:	1d13      	adds	r3, r2, #4
 8003030:	1d02      	adds	r2, r0, #4
 8003032:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003036:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800303a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303e:	f1a3 0408 	sub.w	r4, r3, #8
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	f1a3 0004 	sub.w	r0, r3, #4
 800304a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800304e:	4623      	mov	r3, r4
 8003050:	d51e      	bpl.n	8003090 <nl_func_relu_generic_array_f32+0xdc>
 8003052:	ed62 6a01 	vstmdb	r2!, {s13}
 8003056:	688b      	ldr	r3, [r1, #8]
 8003058:	42a3      	cmp	r3, r4
 800305a:	d91e      	bls.n	800309a <nl_func_relu_generic_array_f32+0xe6>
 800305c:	bc30      	pop	{r4, r5}
 800305e:	4770      	bx	lr
 8003060:	42a2      	cmp	r2, r4
 8003062:	d3fb      	bcc.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 8003064:	1d13      	adds	r3, r2, #4
 8003066:	2500      	movs	r5, #0
 8003068:	1d02      	adds	r2, r0, #4
 800306a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800306e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003072:	f1a3 0408 	sub.w	r4, r3, #8
 8003076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307a:	f1a3 0004 	sub.w	r0, r3, #4
 800307e:	4623      	mov	r3, r4
 8003080:	d80d      	bhi.n	800309e <nl_func_relu_generic_array_f32+0xea>
 8003082:	ed62 7a01 	vstmdb	r2!, {s15}
 8003086:	688b      	ldr	r3, [r1, #8]
 8003088:	42a3      	cmp	r3, r4
 800308a:	d8e7      	bhi.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 800308c:	4603      	mov	r3, r0
 800308e:	e7ec      	b.n	800306a <nl_func_relu_generic_array_f32+0xb6>
 8003090:	ed62 7a01 	vstmdb	r2!, {s15}
 8003094:	688c      	ldr	r4, [r1, #8]
 8003096:	429c      	cmp	r4, r3
 8003098:	d8e0      	bhi.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 800309a:	4603      	mov	r3, r0
 800309c:	e7c9      	b.n	8003032 <nl_func_relu_generic_array_f32+0x7e>
 800309e:	f842 5d04 	str.w	r5, [r2, #-4]!
 80030a2:	688c      	ldr	r4, [r1, #8]
 80030a4:	429c      	cmp	r4, r3
 80030a6:	d8d9      	bhi.n	800305c <nl_func_relu_generic_array_f32+0xa8>
 80030a8:	4603      	mov	r3, r0
 80030aa:	e7de      	b.n	800306a <nl_func_relu_generic_array_f32+0xb6>

080030ac <forward_relu>:
 80030ac:	6942      	ldr	r2, [r0, #20]
 80030ae:	8813      	ldrh	r3, [r2, #0]
 80030b0:	b33b      	cbz	r3, 8003102 <forward_relu+0x56>
 80030b2:	b470      	push	{r4, r5, r6}
 80030b4:	6852      	ldr	r2, [r2, #4]
 80030b6:	6856      	ldr	r6, [r2, #4]
 80030b8:	b106      	cbz	r6, 80030bc <forward_relu+0x10>
 80030ba:	6836      	ldr	r6, [r6, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d91d      	bls.n	80030fc <forward_relu+0x50>
 80030c0:	6913      	ldr	r3, [r2, #16]
 80030c2:	b103      	cbz	r3, 80030c6 <forward_relu+0x1a>
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6982      	ldr	r2, [r0, #24]
 80030c8:	68b4      	ldr	r4, [r6, #8]
 80030ca:	6998      	ldr	r0, [r3, #24]
 80030cc:	69b1      	ldr	r1, [r6, #24]
 80030ce:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	d041      	beq.n	800315a <forward_relu+0xae>
 80030d6:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 80030da:	2d01      	cmp	r5, #1
 80030dc:	d013      	beq.n	8003106 <forward_relu+0x5a>
 80030de:	2c00      	cmp	r4, #0
 80030e0:	d06f      	beq.n	80031c2 <forward_relu+0x116>
 80030e2:	68f6      	ldr	r6, [r6, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80030ea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80030ee:	42a6      	cmp	r6, r4
 80030f0:	fb05 f202 	mul.w	r2, r5, r2
 80030f4:	d1f9      	bne.n	80030ea <forward_relu+0x3e>
 80030f6:	bc70      	pop	{r4, r5, r6}
 80030f8:	f7ff bf5c 	b.w	8002fb4 <nl_func_relu_generic_array_f32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	deff      	udf	#255	; 0xff
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	deff      	udf	#255	; 0xff
 8003106:	6880      	ldr	r0, [r0, #8]
 8003108:	688a      	ldr	r2, [r1, #8]
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	b184      	cbz	r4, 8003132 <forward_relu+0x86>
 8003110:	68f6      	ldr	r6, [r6, #12]
 8003112:	462b      	mov	r3, r5
 8003114:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8003118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800311c:	42a6      	cmp	r6, r4
 800311e:	fb05 f303 	mul.w	r3, r5, r3
 8003122:	d1f9      	bne.n	8003118 <forward_relu+0x6c>
 8003124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003128:	3b01      	subs	r3, #1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	18d2      	adds	r2, r2, r3
 800312e:	4418      	add	r0, r3
 8003130:	d23d      	bcs.n	80031ae <forward_relu+0x102>
 8003132:	1d13      	adds	r3, r2, #4
 8003134:	2500      	movs	r5, #0
 8003136:	1d02      	adds	r2, r0, #4
 8003138:	ed53 7a01 	vldr	s15, [r3, #-4]
 800313c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	f1a3 0004 	sub.w	r0, r3, #4
 8003148:	d833      	bhi.n	80031b2 <forward_relu+0x106>
 800314a:	ed62 7a01 	vstmdb	r2!, {s15}
 800314e:	688c      	ldr	r4, [r1, #8]
 8003150:	3b08      	subs	r3, #8
 8003152:	429c      	cmp	r4, r3
 8003154:	d82b      	bhi.n	80031ae <forward_relu+0x102>
 8003156:	4603      	mov	r3, r0
 8003158:	e7ee      	b.n	8003138 <forward_relu+0x8c>
 800315a:	6880      	ldr	r0, [r0, #8]
 800315c:	688b      	ldr	r3, [r1, #8]
 800315e:	b184      	cbz	r4, 8003182 <forward_relu+0xd6>
 8003160:	68f6      	ldr	r6, [r6, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8003168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800316c:	42a6      	cmp	r6, r4
 800316e:	fb05 f202 	mul.w	r2, r5, r2
 8003172:	d1f9      	bne.n	8003168 <forward_relu+0xbc>
 8003174:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003178:	3a01      	subs	r2, #1
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	189b      	adds	r3, r3, r2
 800317e:	4410      	add	r0, r2
 8003180:	d215      	bcs.n	80031ae <forward_relu+0x102>
 8003182:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80031c8 <forward_relu+0x11c>
 8003186:	3304      	adds	r3, #4
 8003188:	3004      	adds	r0, #4
 800318a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800318e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	bfb8      	it	lt
 8003198:	eef0 7a47 	vmovlt.f32	s15, s14
 800319c:	ed60 7a01 	vstmdb	r0!, {s15}
 80031a0:	688c      	ldr	r4, [r1, #8]
 80031a2:	f1a3 0208 	sub.w	r2, r3, #8
 80031a6:	4294      	cmp	r4, r2
 80031a8:	f1a3 0304 	sub.w	r3, r3, #4
 80031ac:	d9ed      	bls.n	800318a <forward_relu+0xde>
 80031ae:	bc70      	pop	{r4, r5, r6}
 80031b0:	4770      	bx	lr
 80031b2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80031b6:	688c      	ldr	r4, [r1, #8]
 80031b8:	3b08      	subs	r3, #8
 80031ba:	429c      	cmp	r4, r3
 80031bc:	d8f7      	bhi.n	80031ae <forward_relu+0x102>
 80031be:	4603      	mov	r3, r0
 80031c0:	e7ba      	b.n	8003138 <forward_relu+0x8c>
 80031c2:	2201      	movs	r2, #1
 80031c4:	e797      	b.n	80030f6 <forward_relu+0x4a>
 80031c6:	bf00      	nop
 80031c8:	00000000 	.word	0x00000000

080031cc <forward_sm>:
 80031cc:	6942      	ldr	r2, [r0, #20]
 80031ce:	8813      	ldrh	r3, [r2, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 808a 	beq.w	80032ea <forward_sm+0x11e>
 80031d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031da:	ed2d 8b04 	vpush	{d8-d9}
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	6855      	ldr	r5, [r2, #4]
 80031e2:	b085      	sub	sp, #20
 80031e4:	b105      	cbz	r5, 80031e8 <forward_sm+0x1c>
 80031e6:	682d      	ldr	r5, [r5, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d976      	bls.n	80032da <forward_sm+0x10e>
 80031ec:	6913      	ldr	r3, [r2, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d071      	beq.n	80032d6 <forward_sm+0x10a>
 80031f2:	681f      	ldr	r7, [r3, #0]
 80031f4:	68ec      	ldr	r4, [r5, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	68ab      	ldr	r3, [r5, #8]
 80031fa:	6850      	ldr	r0, [r2, #4]
 80031fc:	6862      	ldr	r2, [r4, #4]
 80031fe:	9201      	str	r2, [sp, #4]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	d074      	beq.n	80032ee <forward_sm+0x122>
 8003204:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003208:	2201      	movs	r2, #1
 800320a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800320e:	429c      	cmp	r4, r3
 8003210:	fb01 f202 	mul.w	r2, r1, r2
 8003214:	d1f9      	bne.n	800320a <forward_sm+0x3e>
 8003216:	69ae      	ldr	r6, [r5, #24]
 8003218:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800321c:	9f01      	ldr	r7, [sp, #4]
 800321e:	68b5      	ldr	r5, [r6, #8]
 8003220:	68f3      	ldr	r3, [r6, #12]
 8003222:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8003226:	1bd1      	subs	r1, r2, r7
 8003228:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800322c:	1a12      	subs	r2, r2, r0
 800322e:	429d      	cmp	r5, r3
 8003230:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003234:	d345      	bcc.n	80032c2 <forward_sm+0xf6>
 8003236:	00bb      	lsls	r3, r7, #2
 8003238:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f1c8 0200 	rsb	r2, r8, #0
 8003242:	425b      	negs	r3, r3
 8003244:	9203      	str	r2, [sp, #12]
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800324c:	60b5      	str	r5, [r6, #8]
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	f8c9 4008 	str.w	r4, [r9, #8]
 8003254:	68b2      	ldr	r2, [r6, #8]
 8003256:	2b01      	cmp	r3, #1
 8003258:	ed92 8a00 	vldr	s16, [r2]
 800325c:	d940      	bls.n	80032e0 <forward_sm+0x114>
 800325e:	9900      	ldr	r1, [sp, #0]
 8003260:	1d13      	adds	r3, r2, #4
 8003262:	1857      	adds	r7, r2, r1
 8003264:	ecf3 7a01 	vldmia	r3!, {s15}
 8003268:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	bfb8      	it	lt
 8003272:	eeb0 8a67 	vmovlt.f32	s16, s15
 8003276:	429f      	cmp	r7, r3
 8003278:	d1f4      	bne.n	8003264 <forward_sm+0x98>
 800327a:	eddf 8a1e 	vldr	s17, [pc, #120]	; 80032f4 <forward_sm+0x128>
 800327e:	4692      	mov	sl, r2
 8003280:	46a3      	mov	fp, r4
 8003282:	46a0      	mov	r8, r4
 8003284:	ecba 0a01 	vldmia	sl!, {s0}
 8003288:	ee30 0a48 	vsub.f32	s0, s0, s16
 800328c:	f000 f944 	bl	8003518 <expf>
 8003290:	4557      	cmp	r7, sl
 8003292:	eca8 0a01 	vstmia	r8!, {s0}
 8003296:	ee78 8a80 	vadd.f32	s17, s17, s0
 800329a:	d1f3      	bne.n	8003284 <forward_sm+0xb8>
 800329c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80032a0:	9b00      	ldr	r3, [sp, #0]
 80032a2:	18e2      	adds	r2, r4, r3
 80032a4:	eddb 7a00 	vldr	s15, [fp]
 80032a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ac:	eceb 7a01 	vstmia	fp!, {s15}
 80032b0:	455a      	cmp	r2, fp
 80032b2:	d1f7      	bne.n	80032a4 <forward_sm+0xd8>
 80032b4:	9a02      	ldr	r2, [sp, #8]
 80032b6:	68f3      	ldr	r3, [r6, #12]
 80032b8:	4415      	add	r5, r2
 80032ba:	9a03      	ldr	r2, [sp, #12]
 80032bc:	429d      	cmp	r5, r3
 80032be:	4414      	add	r4, r2
 80032c0:	d2c4      	bcs.n	800324c <forward_sm+0x80>
 80032c2:	60b3      	str	r3, [r6, #8]
 80032c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80032c8:	f8c9 3008 	str.w	r3, [r9, #8]
 80032cc:	b005      	add	sp, #20
 80032ce:	ecbd 8b04 	vpop	{d8-d9}
 80032d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	deff      	udf	#255	; 0xff
 80032da:	2300      	movs	r3, #0
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	deff      	udf	#255	; 0xff
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0e7      	beq.n	80032b4 <forward_sm+0xe8>
 80032e4:	9b00      	ldr	r3, [sp, #0]
 80032e6:	18d7      	adds	r7, r2, r3
 80032e8:	e7c7      	b.n	800327a <forward_sm+0xae>
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	deff      	udf	#255	; 0xff
 80032ee:	2201      	movs	r2, #1
 80032f0:	e791      	b.n	8003216 <forward_sm+0x4a>
 80032f2:	bf00      	nop
 80032f4:	00000000 	.word	0x00000000

080032f8 <ai_check_custom_types>:
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <ai_check_custom_types+0x50>)
 80032fa:	b082      	sub	sp, #8
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	b118      	cbz	r0, 800330a <ai_check_custom_types+0x12>
 8003302:	7803      	ldrb	r3, [r0, #0]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d002      	beq.n	800330e <ai_check_custom_types+0x16>
 8003308:	2000      	movs	r0, #0
 800330a:	b002      	add	sp, #8
 800330c:	4770      	bx	lr
 800330e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <ai_check_custom_types+0x28>
 8003316:	2001      	movs	r0, #1
 8003318:	f080 0001 	eor.w	r0, r0, #1
 800331c:	b002      	add	sp, #8
 800331e:	4770      	bx	lr
 8003320:	7842      	ldrb	r2, [r0, #1]
 8003322:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003326:	429a      	cmp	r2, r3
 8003328:	f100 0001 	add.w	r0, r0, #1
 800332c:	d1f3      	bne.n	8003316 <ai_check_custom_types+0x1e>
 800332e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003332:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003336:	429a      	cmp	r2, r3
 8003338:	d1ed      	bne.n	8003316 <ai_check_custom_types+0x1e>
 800333a:	7842      	ldrb	r2, [r0, #1]
 800333c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003340:	429a      	cmp	r2, r3
 8003342:	d1e8      	bne.n	8003316 <ai_check_custom_types+0x1e>
 8003344:	2000      	movs	r0, #0
 8003346:	e7e7      	b.n	8003318 <ai_check_custom_types+0x20>
 8003348:	08003908 	.word	0x08003908

0800334c <ai_layers_forward_all>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003350:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8003352:	4604      	mov	r4, r0
 8003354:	b31e      	cbz	r6, 800339e <ai_layers_forward_all+0x52>
 8003356:	b1cd      	cbz	r5, 800338c <ai_layers_forward_all+0x40>
 8003358:	6545      	str	r5, [r0, #84]	; 0x54
 800335a:	4629      	mov	r1, r5
 800335c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800335e:	2001      	movs	r0, #1
 8003360:	47b0      	blx	r6
 8003362:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003364:	2700      	movs	r7, #0
 8003366:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003368:	2002      	movs	r0, #2
 800336a:	47b0      	blx	r6
 800336c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800336e:	692b      	ldr	r3, [r5, #16]
 8003370:	4628      	mov	r0, r5
 8003372:	4798      	blx	r3
 8003374:	68eb      	ldr	r3, [r5, #12]
 8003376:	429d      	cmp	r5, r3
 8003378:	f04f 0003 	mov.w	r0, #3
 800337c:	4619      	mov	r1, r3
 800337e:	d006      	beq.n	800338e <ai_layers_forward_all+0x42>
 8003380:	6563      	str	r3, [r4, #84]	; 0x54
 8003382:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003384:	47b0      	blx	r6
 8003386:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003388:	2900      	cmp	r1, #0
 800338a:	d1ec      	bne.n	8003366 <ai_layers_forward_all+0x1a>
 800338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800338e:	2100      	movs	r1, #0
 8003390:	6567      	str	r7, [r4, #84]	; 0x54
 8003392:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003394:	47b0      	blx	r6
 8003396:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003398:	2900      	cmp	r1, #0
 800339a:	d1e4      	bne.n	8003366 <ai_layers_forward_all+0x1a>
 800339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339e:	2d00      	cmp	r5, #0
 80033a0:	d0f4      	beq.n	800338c <ai_layers_forward_all+0x40>
 80033a2:	6545      	str	r5, [r0, #84]	; 0x54
 80033a4:	692b      	ldr	r3, [r5, #16]
 80033a6:	4628      	mov	r0, r5
 80033a8:	4798      	blx	r3
 80033aa:	68eb      	ldr	r3, [r5, #12]
 80033ac:	42ab      	cmp	r3, r5
 80033ae:	d004      	beq.n	80033ba <ai_layers_forward_all+0x6e>
 80033b0:	6563      	str	r3, [r4, #84]	; 0x54
 80033b2:	461d      	mov	r5, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f5      	bne.n	80033a4 <ai_layers_forward_all+0x58>
 80033b8:	e7e8      	b.n	800338c <ai_layers_forward_all+0x40>
 80033ba:	2300      	movs	r3, #0
 80033bc:	6563      	str	r3, [r4, #84]	; 0x54
 80033be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033c0 <ai_array_to_buffer_fmt>:
 80033c0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d01f      	beq.n	8003408 <ai_array_to_buffer_fmt+0x48>
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <ai_array_to_buffer_fmt+0x7c>)
 80033ca:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00a      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 80033d2:	dc0d      	bgt.n	80033f0 <ai_array_to_buffer_fmt+0x30>
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <ai_array_to_buffer_fmt+0x80>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d006      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 80033da:	dd1d      	ble.n	8003418 <ai_array_to_buffer_fmt+0x58>
 80033dc:	4a19      	ldr	r2, [pc, #100]	; (8003444 <ai_array_to_buffer_fmt+0x84>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d002      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 80033e2:	320f      	adds	r2, #15
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10d      	bne.n	8003404 <ai_array_to_buffer_fmt+0x44>
 80033e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80033ec:	4318      	orrs	r0, r3
 80033ee:	4770      	bx	lr
 80033f0:	4a15      	ldr	r2, [pc, #84]	; (8003448 <ai_array_to_buffer_fmt+0x88>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d0f8      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 80033f6:	dd18      	ble.n	800342a <ai_array_to_buffer_fmt+0x6a>
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <ai_array_to_buffer_fmt+0x8c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d0f4      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <ai_array_to_buffer_fmt+0x90>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d0f1      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 8003404:	2340      	movs	r3, #64	; 0x40
 8003406:	e7ef      	b.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <ai_array_to_buffer_fmt+0x94>)
 800340a:	4003      	ands	r3, r0
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8003414:	4318      	orrs	r0, r3
 8003416:	4770      	bx	lr
 8003418:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800341c:	4293      	cmp	r3, r2
 800341e:	d0e3      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 8003420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003424:	4293      	cmp	r3, r2
 8003426:	d0df      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 8003428:	e7ec      	b.n	8003404 <ai_array_to_buffer_fmt+0x44>
 800342a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800342e:	4293      	cmp	r3, r2
 8003430:	d0da      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 8003432:	3207      	adds	r2, #7
 8003434:	4293      	cmp	r3, r2
 8003436:	d0d7      	beq.n	80033e8 <ai_array_to_buffer_fmt+0x28>
 8003438:	e7e4      	b.n	8003404 <ai_array_to_buffer_fmt+0x44>
 800343a:	bf00      	nop
 800343c:	00840040 	.word	0x00840040
 8003440:	00040447 	.word	0x00040447
 8003444:	00040840 	.word	0x00040840
 8003448:	00840840 	.word	0x00840840
 800344c:	0084084f 	.word	0x0084084f
 8003450:	01821040 	.word	0x01821040
 8003454:	00803fff 	.word	0x00803fff

08003458 <ai_array_get_byte_size>:
 8003458:	b1c1      	cbz	r1, 800348c <ai_array_get_byte_size+0x34>
 800345a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800345e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8003462:	4413      	add	r3, r2
 8003464:	fb01 f103 	mul.w	r1, r1, r3
 8003468:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800346c:	3107      	adds	r1, #7
 800346e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8003472:	f021 0107 	bic.w	r1, r1, #7
 8003476:	2804      	cmp	r0, #4
 8003478:	fa21 f102 	lsr.w	r1, r1, r2
 800347c:	d008      	beq.n	8003490 <ai_array_get_byte_size+0x38>
 800347e:	2808      	cmp	r0, #8
 8003480:	d101      	bne.n	8003486 <ai_array_get_byte_size+0x2e>
 8003482:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8003486:	3107      	adds	r1, #7
 8003488:	08c8      	lsrs	r0, r1, #3
 800348a:	4770      	bx	lr
 800348c:	4608      	mov	r0, r1
 800348e:	4770      	bx	lr
 8003490:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8003494:	3107      	adds	r1, #7
 8003496:	08c8      	lsrs	r0, r1, #3
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop

0800349c <__errno>:
 800349c:	4b01      	ldr	r3, [pc, #4]	; (80034a4 <__errno+0x8>)
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000a68 	.word	0x20000a68

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4e0d      	ldr	r6, [pc, #52]	; (80034e0 <__libc_init_array+0x38>)
 80034ac:	4c0d      	ldr	r4, [pc, #52]	; (80034e4 <__libc_init_array+0x3c>)
 80034ae:	1ba4      	subs	r4, r4, r6
 80034b0:	10a4      	asrs	r4, r4, #2
 80034b2:	2500      	movs	r5, #0
 80034b4:	42a5      	cmp	r5, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	4e0b      	ldr	r6, [pc, #44]	; (80034e8 <__libc_init_array+0x40>)
 80034ba:	4c0c      	ldr	r4, [pc, #48]	; (80034ec <__libc_init_array+0x44>)
 80034bc:	f000 f986 	bl	80037cc <_init>
 80034c0:	1ba4      	subs	r4, r4, r6
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	2500      	movs	r5, #0
 80034c6:	42a5      	cmp	r5, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034d0:	4798      	blx	r3
 80034d2:	3501      	adds	r5, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034da:	4798      	blx	r3
 80034dc:	3501      	adds	r5, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	08031780 	.word	0x08031780
 80034e4:	08031780 	.word	0x08031780
 80034e8:	08031780 	.word	0x08031780
 80034ec:	08031784 	.word	0x08031784

080034f0 <memcpy>:
 80034f0:	b510      	push	{r4, lr}
 80034f2:	1e43      	subs	r3, r0, #1
 80034f4:	440a      	add	r2, r1
 80034f6:	4291      	cmp	r1, r2
 80034f8:	d100      	bne.n	80034fc <memcpy+0xc>
 80034fa:	bd10      	pop	{r4, pc}
 80034fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003504:	e7f7      	b.n	80034f6 <memcpy+0x6>

08003506 <memset>:
 8003506:	4402      	add	r2, r0
 8003508:	4603      	mov	r3, r0
 800350a:	4293      	cmp	r3, r2
 800350c:	d100      	bne.n	8003510 <memset+0xa>
 800350e:	4770      	bx	lr
 8003510:	f803 1b01 	strb.w	r1, [r3], #1
 8003514:	e7f9      	b.n	800350a <memset+0x4>
	...

08003518 <expf>:
 8003518:	b530      	push	{r4, r5, lr}
 800351a:	ed2d 8b02 	vpush	{d8}
 800351e:	4d35      	ldr	r5, [pc, #212]	; (80035f4 <expf+0xdc>)
 8003520:	b08b      	sub	sp, #44	; 0x2c
 8003522:	eeb0 8a40 	vmov.f32	s16, s0
 8003526:	f000 f871 	bl	800360c <__ieee754_expf>
 800352a:	f995 3000 	ldrsb.w	r3, [r5]
 800352e:	3301      	adds	r3, #1
 8003530:	ee10 4a10 	vmov	r4, s0
 8003534:	d030      	beq.n	8003598 <expf+0x80>
 8003536:	eeb0 0a48 	vmov.f32	s0, s16
 800353a:	f000 f93d 	bl	80037b8 <finitef>
 800353e:	b358      	cbz	r0, 8003598 <expf+0x80>
 8003540:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80035f8 <expf+0xe0>
 8003544:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	dd35      	ble.n	80035ba <expf+0xa2>
 800354e:	2303      	movs	r3, #3
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <expf+0xe4>)
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	ee18 0a10 	vmov	r0, s16
 800355a:	2300      	movs	r3, #0
 800355c:	9308      	str	r3, [sp, #32]
 800355e:	f7fc ff97 	bl	8000490 <__aeabi_f2d>
 8003562:	f995 3000 	ldrsb.w	r3, [r5]
 8003566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800356a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800356e:	b9cb      	cbnz	r3, 80035a4 <expf+0x8c>
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <expf+0xe8>)
 8003572:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003576:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800357a:	4668      	mov	r0, sp
 800357c:	f000 f91a 	bl	80037b4 <matherr>
 8003580:	b1b0      	cbz	r0, 80035b0 <expf+0x98>
 8003582:	9b08      	ldr	r3, [sp, #32]
 8003584:	b11b      	cbz	r3, 800358e <expf+0x76>
 8003586:	f7ff ff89 	bl	800349c <__errno>
 800358a:	9b08      	ldr	r3, [sp, #32]
 800358c:	6003      	str	r3, [r0, #0]
 800358e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003592:	f7fc ffd5 	bl	8000540 <__aeabi_d2f>
 8003596:	4604      	mov	r4, r0
 8003598:	ee00 4a10 	vmov	s0, r4
 800359c:	b00b      	add	sp, #44	; 0x2c
 800359e:	ecbd 8b02 	vpop	{d8}
 80035a2:	bd30      	pop	{r4, r5, pc}
 80035a4:	4917      	ldr	r1, [pc, #92]	; (8003604 <expf+0xec>)
 80035a6:	2000      	movs	r0, #0
 80035a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d1e4      	bne.n	800357a <expf+0x62>
 80035b0:	f7ff ff74 	bl	800349c <__errno>
 80035b4:	2322      	movs	r3, #34	; 0x22
 80035b6:	6003      	str	r3, [r0, #0]
 80035b8:	e7e3      	b.n	8003582 <expf+0x6a>
 80035ba:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003608 <expf+0xf0>
 80035be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	d5e7      	bpl.n	8003598 <expf+0x80>
 80035c8:	2304      	movs	r3, #4
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <expf+0xe4>)
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	ee18 0a10 	vmov	r0, s16
 80035d4:	2300      	movs	r3, #0
 80035d6:	9308      	str	r3, [sp, #32]
 80035d8:	f7fc ff5a 	bl	8000490 <__aeabi_f2d>
 80035dc:	2300      	movs	r3, #0
 80035de:	2200      	movs	r2, #0
 80035e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80035e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035ec:	f995 3000 	ldrsb.w	r3, [r5]
 80035f0:	e7dc      	b.n	80035ac <expf+0x94>
 80035f2:	bf00      	nop
 80035f4:	20000acc 	.word	0x20000acc
 80035f8:	42b17180 	.word	0x42b17180
 80035fc:	08031758 	.word	0x08031758
 8003600:	47efffff 	.word	0x47efffff
 8003604:	7ff00000 	.word	0x7ff00000
 8003608:	c2cff1b5 	.word	0xc2cff1b5

0800360c <__ieee754_expf>:
 800360c:	ee10 2a10 	vmov	r2, s0
 8003610:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003614:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003618:	d902      	bls.n	8003620 <__ieee754_expf+0x14>
 800361a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800361e:	4770      	bx	lr
 8003620:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8003624:	d106      	bne.n	8003634 <__ieee754_expf+0x28>
 8003626:	eddf 7a51 	vldr	s15, [pc, #324]	; 800376c <__ieee754_expf+0x160>
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf18      	it	ne
 800362e:	eeb0 0a67 	vmovne.f32	s0, s15
 8003632:	4770      	bx	lr
 8003634:	484e      	ldr	r0, [pc, #312]	; (8003770 <__ieee754_expf+0x164>)
 8003636:	4282      	cmp	r2, r0
 8003638:	dd04      	ble.n	8003644 <__ieee754_expf+0x38>
 800363a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8003774 <__ieee754_expf+0x168>
 800363e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003642:	4770      	bx	lr
 8003644:	2a00      	cmp	r2, #0
 8003646:	da03      	bge.n	8003650 <__ieee754_expf+0x44>
 8003648:	4a4b      	ldr	r2, [pc, #300]	; (8003778 <__ieee754_expf+0x16c>)
 800364a:	4291      	cmp	r1, r2
 800364c:	f200 808a 	bhi.w	8003764 <__ieee754_expf+0x158>
 8003650:	4a4a      	ldr	r2, [pc, #296]	; (800377c <__ieee754_expf+0x170>)
 8003652:	4291      	cmp	r1, r2
 8003654:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003658:	d954      	bls.n	8003704 <__ieee754_expf+0xf8>
 800365a:	4a49      	ldr	r2, [pc, #292]	; (8003780 <__ieee754_expf+0x174>)
 800365c:	4291      	cmp	r1, r2
 800365e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003662:	d836      	bhi.n	80036d2 <__ieee754_expf+0xc6>
 8003664:	4947      	ldr	r1, [pc, #284]	; (8003784 <__ieee754_expf+0x178>)
 8003666:	4411      	add	r1, r2
 8003668:	ed91 7a00 	vldr	s14, [r1]
 800366c:	4946      	ldr	r1, [pc, #280]	; (8003788 <__ieee754_expf+0x17c>)
 800366e:	440a      	add	r2, r1
 8003670:	edd2 7a00 	vldr	s15, [r2]
 8003674:	ee30 7a47 	vsub.f32	s14, s0, s14
 8003678:	f1c3 0201 	rsb	r2, r3, #1
 800367c:	1ad2      	subs	r2, r2, r3
 800367e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8003682:	ee60 6a00 	vmul.f32	s13, s0, s0
 8003686:	eddf 5a41 	vldr	s11, [pc, #260]	; 800378c <__ieee754_expf+0x180>
 800368a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8003790 <__ieee754_expf+0x184>
 800368e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8003692:	eddf 5a40 	vldr	s11, [pc, #256]	; 8003794 <__ieee754_expf+0x188>
 8003696:	eee5 5a26 	vfma.f32	s11, s10, s13
 800369a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8003798 <__ieee754_expf+0x18c>
 800369e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80036a2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800379c <__ieee754_expf+0x190>
 80036a6:	eee5 5a26 	vfma.f32	s11, s10, s13
 80036aa:	eeb0 5a40 	vmov.f32	s10, s0
 80036ae:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80036b2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80036b6:	eef0 6a45 	vmov.f32	s13, s10
 80036ba:	ee20 5a05 	vmul.f32	s10, s0, s10
 80036be:	bb92      	cbnz	r2, 8003726 <__ieee754_expf+0x11a>
 80036c0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80036c4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80036c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80036cc:	ee36 0a40 	vsub.f32	s0, s12, s0
 80036d0:	4770      	bx	lr
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <__ieee754_expf+0x194>)
 80036d4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80037a4 <__ieee754_expf+0x198>
 80036d8:	4413      	add	r3, r2
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80036e2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80037a8 <__ieee754_expf+0x19c>
 80036e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ea:	ee17 2a90 	vmov	r2, s15
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80036f6:	eeb0 7a40 	vmov.f32	s14, s0
 80036fa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80037ac <__ieee754_expf+0x1a0>
 80036fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003702:	e7bc      	b.n	800367e <__ieee754_expf+0x72>
 8003704:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8003708:	d20b      	bcs.n	8003722 <__ieee754_expf+0x116>
 800370a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003774 <__ieee754_expf+0x168>
 800370e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8003712:	eef4 6ac6 	vcmpe.f32	s13, s12
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	dd02      	ble.n	8003722 <__ieee754_expf+0x116>
 800371c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8003720:	4770      	bx	lr
 8003722:	2200      	movs	r2, #0
 8003724:	e7ad      	b.n	8003682 <__ieee754_expf+0x76>
 8003726:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800372a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800372e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8003732:	bfb8      	it	lt
 8003734:	3264      	addlt	r2, #100	; 0x64
 8003736:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800373a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800373e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8003742:	ee17 3a90 	vmov	r3, s15
 8003746:	bfab      	itete	ge
 8003748:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800374c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8003750:	ee00 3a10 	vmovge	s0, r3
 8003754:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80037b0 <__ieee754_expf+0x1a4>
 8003758:	bfbc      	itt	lt
 800375a:	ee00 3a10 	vmovlt	s0, r3
 800375e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8003762:	4770      	bx	lr
 8003764:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800376c <__ieee754_expf+0x160>
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	00000000 	.word	0x00000000
 8003770:	42b17217 	.word	0x42b17217
 8003774:	7149f2ca 	.word	0x7149f2ca
 8003778:	42cff1b5 	.word	0x42cff1b5
 800377c:	3eb17218 	.word	0x3eb17218
 8003780:	3f851591 	.word	0x3f851591
 8003784:	08031768 	.word	0x08031768
 8003788:	08031770 	.word	0x08031770
 800378c:	3331bb4c 	.word	0x3331bb4c
 8003790:	b5ddea0e 	.word	0xb5ddea0e
 8003794:	388ab355 	.word	0x388ab355
 8003798:	bb360b61 	.word	0xbb360b61
 800379c:	3e2aaaab 	.word	0x3e2aaaab
 80037a0:	08031760 	.word	0x08031760
 80037a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80037a8:	3f317180 	.word	0x3f317180
 80037ac:	3717f7d1 	.word	0x3717f7d1
 80037b0:	0d800000 	.word	0x0d800000

080037b4 <matherr>:
 80037b4:	2000      	movs	r0, #0
 80037b6:	4770      	bx	lr

080037b8 <finitef>:
 80037b8:	ee10 3a10 	vmov	r3, s0
 80037bc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80037c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80037c4:	bfac      	ite	ge
 80037c6:	2000      	movge	r0, #0
 80037c8:	2001      	movlt	r0, #1
 80037ca:	4770      	bx	lr

080037cc <_init>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr

080037d8 <_fini>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr
